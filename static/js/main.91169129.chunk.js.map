{"version":3,"sources":["components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.module.css","components/main/commonComponents/modal/ModalWindow.module.css","features/error404/Error404.module.css","components/main/commonComponents/TablePagination.module.css","components/main/packsList/packs/NavBar.module.css","components/main/packsList/packs/PacksListTable.module.css","bll/profile-reducer.ts","dal/api.ts","utils/changePasswordModel-util.ts","bll/auth-reducer.ts","bll/app-reducer.ts","features/errors/ErrorSnackbar.tsx","components/main/styles.ts","components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.tsx","components/auth/Registration.tsx","components/auth/Login.tsx","components/auth/ForgotPassword.tsx","components/profile/Profile.tsx","components/auth/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","components/header/Header.tsx","components/main/commonComponents/Input.tsx","utils/cardsApiModel-util.ts","bll/cards-reducer.ts","utils/trimmedString-util.ts","utils/updateDate-util.ts","components/main/commonComponents/TablePagination.tsx","components/main/commonComponents/modal/editCardModal/EditCardModal.tsx","components/main/cards/cards/CardsTableActions.tsx","components/main/cards/cards/CardsTable.tsx","utils/localStorage-util.ts","components/main/commonComponents/modal/addCardModal/AddCardModal.tsx","components/main/cards/Cards.tsx","bll/packs-reducer.ts","components/main/packsList/packs/NavBar.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalAnswer.tsx","bll/learn-reducer.ts","components/main/commonComponents/modal/editPackModal/EditPackModal.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalQuestion.tsx","components/main/packsList/packs/PacksListTable.tsx","components/main/commonComponents/modal/addPackModal/AddPackModal.tsx","components/main/packsList/PacksList.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","components/main/cards/Cards.module.css"],"names":["module","exports","initialState","setProfileAC","data","type","payload","instance","axios","create","baseURL","withCredentials","authApi","post","delete","email","password","model","cardPacksApi","generateURL","Object","entries","forEach","el","newURL","slice","get","pack","id","put","cardsPack","card","changePasswordModel","from","message","isLoggedIn","isRegistered","changeProcess","newPasswordSet","setSignInAC","logoutTC","dispatch","a","setAppStatusAC","error","errorType","status","isInitialized","setAppErrorAC","ErrorSnackbar","memo","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","useStyles","makeStyles","theme","createStyles","authPaper","marginTop","spacing","display","flexDirection","alignItems","authAvatar","margin","backgroundColor","palette","secondary","main","authForm","width","authSubmit","authTextFieldStyle","height","ProgressModalComponent","appStatus","className","s","progressContainer","progressDiv","CircularProgress","Registration","classes","auth","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","response","resetForm","to","Container","component","maxWidth","CssBaseline","Avatar","Typography","variant","handleSubmit","noValidate","TextField","fullWidth","label","autoFocus","helperText","touched","errors","getFieldProps","Button","color","disabled","isValid","Grid","container","item","Link","RouterLink","Login","rememberMe","res","FormControlLabel","control","Checkbox","value","xs","ForgotPassword","Profile","profileData","profile","NewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","history","useHistory","onClickHandler","useCallback","goBack","src","Error404Img","alt","size","onClick","Header","location","useLocation","useState","setValue","useEffect","pathname","AppBar","typo","Tabs","centered","Tab","push","icon","logoutButton","position","justifyContent","marginLeft","borderColor","marginRight","Input","props","placeholderValue","dispatchHandler","onChangeHandler","e","target","input","placeholder","onChange","packsApiModel","packs","apiModel","packName","sortPacks","JSON","stringify","sortPacksDirection","sortBy","page","pageCount","user_id","cardsApiModel","cards","cardAnswer","cardQuestion","cardsPack_id","sortCards","sortCardDirection","cardsTotalCount","minGrade","maxGrade","packUserId","currentPackName","searchTextAnswer","searchTexQuestion","setPackAC","setPackTC","getState","newPackApiModel","pastPageCount","currentPage","currentPageCount","newPage","Math","floor","trimmedString","str","number","length","substring","updateDate","cardUpdateDate","Date","toLocaleString","year","month","day","TablePaginationActions","count","rowsPerPage","onPageChange","useTheme","root","IconButton","aria-label","direction","ceil","EditCardModal","closeAddPackModal","editCard","question","setQuestion","answer","setAnswer","darkWindow","windowByAddEditCard","questionInput","currentTarget","answerInput","addNewCardModalButton","_id","CardsTableActions","deleteCard","editPackModal","setEditPackModal","closeEditPackModal","TableCell","align","containerActionsButton","actionsButtonOfCards","padding","CardsTable","labelRowsPerPage","idUser","packID","handleChangePage","editCardHandler","editCardTC","onClickSortHandler","sortValue","deleteCardHandler","cardId","deleteCardTC","Table","table","TableHead","tableHead","TableRow","TableSortLabel","active","TableBody","map","updated","round","grade","TableFooter","footerPage","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","onRowsPerPageChange","parseInt","ActionsComponent","minWidth","packsListTableBodyNavLink","textDecoration","packsListTableBodyActionsSection","loadState","serializedState","localStorage","getItem","parse","err","saveState","prevState","setItem","AddCardModal","addNewCard","Cards","setCardQuestion","setCardAnswer","intervalId","setIntervalId","addPackModal","setAddPackModal","cardPacks","filter","name","searchQuestionHandler","clearInterval","newIntervalID","setTimeout","searchAnswerHandler","Paper","paper","body","arrowBackToPacks","titleBackToPacks","packListHeading","inputButtonSection","addNewCardButton","TableContainer","packsCardsFooter","marginBottom","minHeight","myPacks","minCardsCount","maxCardsCount","searchText","cardPacksTotalCount","setCardPacksAC","setCardPacksTC","newCardsApiModel","NavBar","sliderValue","setSliderValue","navbar","navbarShowPacksCards","ButtonGroup","navbarMyAllButtons","slider","Slider","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","borderRadius","fontSize","fontWeight","LearnCardsModalAnswer","openNextRandomCard","closeAllModal","setGrade","windowByAnswer","nameOfPack","randomQuestionAndAnswer","FormGroup","optionsForRateYourself","valueOfGrade","title","i","Radio","checked","checkedValue","labelPlacement","nextQuestionButton","setCardsOfPackAC","fetchCardsOfPackTC","cardsOfPackApiModel","EditPackModal","oldName","updatePackName","newName","setNewName","windowByAddPack","addEditPackInput","LearnCardsModalQuestion","onAnswerButtonClick","windowByQuestion","showAnswerButton","PacksListTable","cardsForLearn","editPackData","setEditPackData","learnCardsModalQuestion","setLearnCardsModalQuestion","learnCardsModalAnswer","setLearnCardsModalAnswer","randomCard","setRandomCard","setName","cardsCount","setCardsCount","sumOfRepeats","reduce","acc","random","sum","getCard","fetchAnswerQuestion","card_id","updatedGrade","updatePackTC","onDeleteButtonClickHandler","packId","cardsState","remainPacks","deletePackTC","startLearning","user_name","style","openEditPackModal","AddPackModal","addNewPack","text","setText","PacksList","setSearchText","intervalID","setIntervalID","newPackName","searchInputHandler","addNewPackButton","App","top","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Number","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91169129.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainer\":\"ProgressModalComponent_progressContainer__31zKT\",\"progressDiv\":\"ProgressModalComponent_progressDiv__2DadR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkWindow\":\"ModalWindow_darkWindow__2e69W\",\"windowByQuestion\":\"ModalWindow_windowByQuestion__296fI\",\"nameOfPack\":\"ModalWindow_nameOfPack__3wMa3\",\"randomQuestionAndAnswer\":\"ModalWindow_randomQuestionAndAnswer__vzcBf\",\"windowByAnswer\":\"ModalWindow_windowByAnswer__1AJbc\",\"windowByAddEditCard\":\"ModalWindow_windowByAddEditCard__cdBRi\",\"windowByAddPack\":\"ModalWindow_windowByAddPack__3lAu_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__3uIWn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TablePagination_root__8X0ET\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"NavBar_slider__SAJt2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerPage\":\"PacksListTable_footerPage__3kKea\"};","import {AuthResponseType} from '../dal/api';\r\n\r\nconst initialState = {} as ProfileStateType\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: AuthResponseType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\nexport type ProfileStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string,\r\n}\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>\r\n\r\nexport type ProfileActionsType =\r\n    | SetProfileActionType","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<AuthResponseType>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.post<AuthResponseType>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, {email, password})\r\n    },\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n\r\nexport const cardPacksApi = {\r\n    fetchPacks(payload?: PacksRequestDataType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PacksResponseType>(`cards/pack${newURL}`)\r\n    },\r\n    createPack(pack: CreatePackRequestType) {\r\n        return instance.post(`cards/pack`, pack)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePackRequestType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    fetchPack(payload: CardsRequestType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PackResponseType>(`/cards/card${newURL}`)\r\n    },\r\n    createCard(data: CreateCardType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    editCard(data: EditCardRequestType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    },\r\n    updatedGrade(payload: GradeRequestType) {\r\n        return instance.put<GradeResponseType>(`/cards/grade`, payload)\r\n    },\r\n}\r\n\r\n//login type\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n//register type\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}\r\n//change password type\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\n\r\n//get packs type\r\nexport type PacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<PacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type PacksType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\n//create cards type\r\nexport type CreatePackRequestType = {\r\n    cardsPack: PackDataType\r\n}\r\nexport type PackDataType = {\r\n    name?: string | null\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\n//update cards type\r\nexport type UpdatePackRequestType = {\r\n    _id: string,\r\n    name?: string,\r\n}\r\n\r\n//get cards type\r\nexport type CardsRequestType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type PackResponseType = {\r\n    cards: Array<OnePackType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type OnePackType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n//create card type\r\nexport type CreateCardType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type EditCardRequestType = CreateCardType & {\r\n    _id: string\r\n}\r\n\r\n//update grade\r\nexport type GradeRequestType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\nexport type GradeResponseType = {\r\n    updatedGrade: GradeDataType\r\n}\r\nexport type GradeDataType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n<!--                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>-->\r\n                        <a href='https://MartaVeresova.github.io/learning_cards/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\nimport {authApi, LoginParamsType} from '../dal/api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isRegistered: false,\r\n    changeProcess: false,\r\n    newPasswordSet: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'auth/SET-SIGN-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        case 'auth/SET-SIGN-UP':\r\n            return {...state, isRegistered: true}\r\n\r\n        case 'auth/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n\r\n        case 'auth/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignInAC = (isLoggedIn: boolean) =>\r\n    ({type: 'auth/SET-SIGN-IN', isLoggedIn} as const)\r\n\r\nexport const setSignUpAC = () =>\r\n    ({type: 'auth/SET-SIGN-UP'} as const)\r\n\r\nexport const changePasswordAC = () =>\r\n    ({type: 'auth/CHANGE-PASSWORD'} as const)\r\n\r\nexport const setNewPasswordAC = () =>\r\n    ({type: 'auth/SET-NEW-PASSWORD'} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.login(data)\r\n        dispatch(setProfileAC(res.data))\r\n        dispatch(setSignInAC(true))\r\n    } catch (err) {\r\n        const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n        dispatch(setAppErrorAC(error))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const setSignUpTC = (email: string, password: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.register(email, password)\r\n        dispatch(setSignUpAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\n\r\n\r\n//types\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\nexport type ChangePasswordActionsType = ReturnType<typeof changePasswordAC>\r\nexport type SetNewPasswordActionTypes = ReturnType<typeof setNewPasswordAC>\r\n\r\nexport type AuthActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetSignUpActionType\r\n    | ChangePasswordActionsType\r\n    | SetNewPasswordActionTypes\r\n\r\n\r\n\r\n","import {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from './profile-reducer';\r\nimport {authApi} from '../dal/api';\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'succeeded' as AppStatusType,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {...state, error: action.error, errorType: action.errorType}\r\n\r\n        case 'app/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.me()\r\n        if (res.data) {\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch(setProfileAC(res.data))\r\n        }\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type AppStatusType = 'loading' | 'succeeded'\r\nexport type AppErrorType = 'error' | 'warning' | 'info' | 'success'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | SetIsInitializedActionType\r\n","import React, {FC, memo} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nexport const ErrorSnackbar: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n})","import {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {Theme} from '@material-ui/core/styles/createTheme';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\r\n//login, registration, change password\r\n    authPaper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    authAvatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    authForm: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    authSubmit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    authTextFieldStyle: {\r\n        height: '65px',\r\n    },\r\n}))","import React, {FC, memo} from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport s from './ProgressModalComponent.module.css'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../../bll/store';\r\nimport {AppStatusType} from '../../../../../bll/app-reducer';\r\n\r\n\r\nexport const ProgressModalComponent: FC = memo(() => {\r\n\r\n    const appStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    return <>\r\n        {\r\n            appStatus === 'loading' &&\r\n            <div className={s.progressContainer}>\r\n                <div className={s.progressDiv}>\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n        }\r\n    </>\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport {Link as RouterLink, Redirect} from 'react-router-dom';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {setSignUpTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Registration: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.authForm} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link component={RouterLink} to=\"/login\">\r\n                                    Do have an account? Sign In\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Login: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                //.min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        type=\"email\"\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {changePasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const ForgotPassword: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.auth.changeProcess)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <ErrorSnackbar/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n})","import React, {FC, memo} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\n\r\n\r\nexport const Profile: FC = memo(() => {\r\n\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>Your e-mail: {profileData}</div>\r\n        </>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {setNewPasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const NewPassword: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.auth.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n})\r\n","import React, {FC, memo, ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\n\r\nexport const PrivateRoute: FC<PropsType> = memo(({render: Component, isLoggedIn, path, redirectTo}) => {\r\n\r\n\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {FC, memo, useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nexport const Error404: FC = memo(() => {\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useEffect, useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport {logoutTC} from '../../bll/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport AccountCircleOutlined from '@material-ui/icons/AccountCircleOutlined';\r\nimport DynamicFeedOutlined from '@material-ui/icons/DynamicFeedOutlined';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Header: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/profile') {\r\n            setValue(1)\r\n        } else {\r\n            setValue(0)\r\n        }\r\n    }, [location, value])\r\n\r\n    const onPacksClickHandler = () => {\r\n        setValue(0)\r\n        history.push('/')\r\n    }\r\n    const onProfileClickHandler = () => {\r\n        setValue(1)\r\n        history.push('/profile')\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return <>\r\n        <AppBar className={classes.app}>\r\n            <Typography className={classes.typo} variant={'h6'}>\r\n                CARDS\r\n            </Typography>\r\n            {\r\n                isLoggedIn ?\r\n                    <>\r\n                        <Tabs\r\n                            value={value}\r\n                            centered\r\n                        >\r\n                            <Tab onClick={onPacksClickHandler}\r\n                                 label={'Packs List'}\r\n                                 icon={<DynamicFeedOutlined/>}/>\r\n                            <Tab onClick={onProfileClickHandler}\r\n                                 label={'Profile'}\r\n                                 icon={<AccountCircleOutlined/>}/>\r\n                        </Tabs>\r\n                        <Button className={classes.logoutButton}\r\n                                onClick={obLogOutClick}\r\n                                variant=\"outlined\"\r\n                        >\r\n                            LOGOUT\r\n                        </Button>\r\n                    </> : null\r\n            }\r\n        </AppBar>\r\n    </>\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        app: {\r\n            position: 'static',\r\n            flexDirection: 'row',\r\n            display: 'flex',\r\n            height: '72px',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n        },\r\n        typo: {\r\n            marginLeft: '10px',\r\n        },\r\n        logoutButton: {\r\n            color: 'white',\r\n            borderColor: 'white',\r\n            marginRight: '10px',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Input: FC<InputSearchPropsType> = memo( props => {\r\n\r\n    const {placeholderValue, value, dispatchHandler} = props\r\n    const classes = useStyles()\r\n\r\n    const onChangeHandler = async (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatchHandler(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <TextField\r\n            className={classes.input}\r\n            placeholder={placeholderValue ? placeholderValue : 'Search'}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n            onChange={onChangeHandler}\r\n            value={value}\r\n        />\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype InputSearchPropsType = {\r\n    placeholderValue: string\r\n    value: string\r\n    dispatchHandler: (value: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        input: {\r\n            height: '40px',\r\n            marginRight: '15px'\r\n        },\r\n    }),\r\n);","import {CardsRequestType, PacksRequestDataType} from '../dal/api';\r\nimport {PacksInitialStateType} from \"../bll/packs-reducer\";\r\nimport {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const packsApiModel = (packs: PacksInitialStateType, data?: PacksRequestDataType) => {\r\n    const apiModel = {\r\n        packName: packs.packName,\r\n        min: packs.min,\r\n        max: packs.max,\r\n        sortPacks: JSON.stringify(packs.sortPacksDirection) + packs.sortBy,\r\n        page: packs.page,\r\n        pageCount: packs.pageCount,\r\n        user_id: packs.user_id,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\nexport const cardsApiModel = (cards: CardsInitialStateType, data?: CardsRequestType) => {\r\n    const apiModel = {\r\n        cardAnswer: cards.cardAnswer,\r\n        cardQuestion: cards.cardQuestion,\r\n        cardsPack_id: cards.cardsPack_id,\r\n        min: cards.min,\r\n        max: cards.max,\r\n        sortCards: JSON.stringify(cards.sortCardDirection) + cards.sortBy,\r\n        page: cards.page,\r\n        pageCount: cards.pageCount,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\n","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CreateCardType,\r\n    EditCardRequestType,\r\n    OnePackType,\r\n    CardsRequestType,\r\n    PackResponseType\r\n} from '../dal/api';\r\nimport {cardsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<OnePackType>,\r\n    cardsTotalCount: 1,\r\n    minGrade: 0,\r\n    maxGrade: 5,\r\n    page: 1,\r\n    pageCount: 5,\r\n    packUserId: '',\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    min: 0,\r\n    max: 5,\r\n    sortCardDirection: 0,\r\n    sortBy: 'updated',\r\n    cardsPack_id: '',\r\n    currentPackName: 'Pack name',\r\n    searchTextAnswer: '',\r\n    searchTexQuestion: '',\r\n} as CardsInitialStateType\r\n\r\n\r\nexport const cardsReducer = (state = initialState, action: PackActionsType): CardsInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-PACK':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                sortBy: action.data.sortCards.slice(1),\r\n                sortCardDirection: Number(action.data.sortCards.substring(0, 1)),\r\n                searchTextAnswer: action.data.cardAnswer,\r\n                searchTexQuestion: action.data.cardQuestion,\r\n            }\r\n\r\n        case 'cards/RESET-PACK':\r\n            return {\r\n                ...state,\r\n                cards: [],\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPackAC = (data: PackResponseType & NewPackApiModelType) =>\r\n    ({type: 'cards/SET-PACK', data} as const)\r\nexport const resetPackAC = () =>\r\n    ({type: 'cards/RESET-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const setPackTC = (data: CardsRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newPackApiModel = cardsApiModel(getState().cards, data)\r\n        const pastPageCount = getState().cards.pageCount\r\n        const currentPage = getState().cards.page\r\n        const currentPageCount = newPackApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newPackApiModel.page\r\n        try {\r\n            const res = await cardPacksApi.fetchPack({...newPackApiModel, page: newPage})\r\n            dispatch(setPackAC({...res.data, ...newPackApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createCardTC = (data: CreateCardType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id, page: 1, sortCards: '0updated',}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const deleteCardTC = (cardsPack_id: string, cardId: string): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deleteCard(cardId)\r\n            dispatch(setPackTC({cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\nexport const editCardTC = (data: EditCardRequestType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.editCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n        }\r\n    }\r\n\r\n//types\r\nexport type CardsInitialStateType = PackResponseType & {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    min: number\r\n    max: number\r\n    sortCardDirection: number\r\n    sortBy: string\r\n    cardsPack_id: string\r\n    currentPackName: string\r\n    searchTextAnswer: string\r\n    searchTexQuestion: string\r\n}\r\ntype NewPackApiModelType = {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    cardsPack_id: string\r\n    min: number\r\n    max: number\r\n    sortCards: string\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type SetPackActionType = ReturnType<typeof setPackAC>\r\nexport type resetPackActionType = ReturnType<typeof resetPackAC>\r\n\r\nexport type PackActionsType =\r\n    | SetPackActionType\r\n    | resetPackActionType","export const trimmedString = (str: string, number: number) => {\r\n    if (str.length > number) {\r\n        return str.substring(0, number) + '...'\r\n    } else {\r\n        return str\r\n    }\r\n}","export const updateDate = (cardUpdateDate: string) => {\r\n    let formattedDate = new Date(cardUpdateDate)\r\n    return formattedDate.toLocaleString('es', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: 'numeric',\r\n    })\r\n}","import React, {memo, MouseEvent} from 'react';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport s from './TablePagination.module.css'\r\n\r\n\r\nexport const TablePaginationActions = memo((props: TablePaginationActionsProps) => {\r\n\r\n    const {count, rowsPerPage, page, onPageChange} = props\r\n    const theme = useTheme()\r\n\r\n    const handleFirstPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={s.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype TablePaginationActionsProps = {\r\n    count: number\r\n    rowsPerPage: number\r\n    page: number\r\n    onPageChange: (e: MouseEvent<HTMLButtonElement>, newPage: number) => void\r\n}","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {EditCardRequestType, OnePackType} from '../../../../../dal/api';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const EditCardModal: FC<EditPackModalPropsType> = memo(({closeAddPackModal, card, editCard}) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState(card.question)\r\n    const [answer, setAnswer] = useState(card.answer)\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        editCard({cardsPack_id: card.cardsPack_id, _id: card._id, answer, question})\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditCard}>\r\n                <h2>Edit card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={onButtonClickHandler}>Save changes</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype EditPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        questionInput: {\r\n            width: '450px',\r\n        },\r\n        answerInput: {\r\n            width: '450px',\r\n            marginTop: '30px',\r\n        },\r\n        addNewCardModalButton: {\r\n            width: '150px',\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, useCallback, useState, memo} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {EditCardModal} from '../../commonComponents/modal/editCardModal/EditCardModal';\r\nimport {EditCardRequestType, OnePackType} from '../../../../dal/api';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const CardsTableActions: FC<PackTableActionsPropsType> = memo(props => {\r\n\r\n    const {deleteCard, editCard, card} = props\r\n\r\n    const classes = useStyles()\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const onDeleteButtonClick = () => {\r\n        deleteCard(card._id)\r\n    }\r\n    const openEditPackModal = () => {\r\n        setEditPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <TableCell align=\"right\" className={classes.containerActionsButton}>\r\n            {\r\n                editPackModal &&\r\n                <EditCardModal closeAddPackModal={closeEditPackModal}\r\n                               editCard={editCard}\r\n                               card={card}/>\r\n            }\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={onDeleteButtonClick}\r\n            >DELETE</Button>\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={openEditPackModal}\r\n            >EDIT</Button>\r\n        </TableCell>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype PackTableActionsPropsType = {\r\n    deleteCard: (cardId: string) => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        actionsButtonOfCards: {\r\n            marginRight: '10px',\r\n        },\r\n        containerActionsButton: {\r\n            width: '166px',\r\n            padding: '16px 0',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo, MouseEvent, useCallback, useEffect} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {CardsInitialStateType, deleteCardTC, editCardTC, resetPackAC, setPackTC} from '../../../../bll/cards-reducer';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Table from '@material-ui/core/Table';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {CardsTableActions} from './CardsTableActions';\r\nimport {EditCardRequestType} from '../../../../dal/api';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport s from '../Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const CardsTable: FC<PackNameTableProps> = memo(({labelRowsPerPage}) => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packID = useLocation().pathname.substring(6)\r\n\r\n\r\n    useEffect(() => {\r\n        return function () {\r\n            dispatch(resetPackAC())\r\n        }\r\n    }, [dispatch])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: newPage + 1}))\r\n    }, [dispatch, packID])\r\n\r\n    const editCardHandler = useCallback((data: EditCardRequestType) => {\r\n        dispatch(editCardTC({...data}))\r\n    }, [dispatch])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (cards.sortCardDirection === 0) {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCardTC(cards.cardsPack_id, cardId))\r\n    }, [dispatch, cards.cardsPack_id])\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, pageCount: parseInt(e.target.value, 10)}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n            <TableHead className={classes.tableHead}>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'question'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('question')}\r\n                        >\r\n                            Question\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'answer'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('answer')}\r\n                        >\r\n                            Answer\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'updated'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('updated')}\r\n                        >\r\n                            Last Updated\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'grade'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('grade')}\r\n                        >\r\n                            Grade\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Actions\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    cards.cards.map((cards) =>\r\n                        <TableRow key={cards._id}>\r\n                            <TableCell component=\"th\">{trimmedString(cards.question, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{trimmedString(cards.answer, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{updateDate(cards.updated)}</TableCell>\r\n                            <TableCell align=\"right\">{Math.round(cards.grade)}</TableCell>\r\n                            {cards.user_id === idUser ?\r\n                                <CardsTableActions\r\n                                    deleteCard={deleteCardHandler}\r\n                                    editCard={editCardHandler}\r\n                                    card={cards}\r\n                                />\r\n                                : <TableCell/>}\r\n                        </TableRow>\r\n                    )}\r\n            </TableBody>\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <td className={s.footerPage}>\r\n                        Page: {cards.page} (Total:{Math.ceil(cards.cardsTotalCount / cards.pageCount)})\r\n                    </td>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25, {\r\n                            label: 'All',\r\n                            value: cards.cardsTotalCount\r\n                        }]}\r\n                        colSpan={6}\r\n                        count={cards.cardsTotalCount}\r\n                        rowsPerPage={cards.pageCount}\r\n                        page={cards.page - 1}\r\n                        SelectProps={{\r\n                            inputProps: {'aria-label': 'rows per page'},\r\n                            native: true,\r\n                        }}\r\n                        labelRowsPerPage={labelRowsPerPage}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangePageCount}\r\n                        ActionsComponent={TablePaginationActions}\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        </Table>\r\n    )\r\n})\r\n\r\ntype SortByType = 'question' | 'answer' | 'updated' | 'grade'\r\ntype PackNameTableProps = {\r\n    labelRowsPerPage: string\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        table: {\r\n            minWidth: '700px',\r\n        },\r\n        tableHead: {\r\n            backgroundColor: 'lightblue',\r\n        },\r\n        packsListTableBodyNavLink: {\r\n            textDecoration: 'none',\r\n            color: 'black'\r\n        },\r\n        packsListTableBodyActionsSection: {\r\n            display: 'flex',\r\n            width: '224px',\r\n            justifyContent: 'flex-end',\r\n        },\r\n        footerPage: {\r\n            display: 'flex',\r\n            height: '53px',\r\n            marginLeft: '10px',\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);","import {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('team_project');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: localStorageStateType) => {\r\n    const prevState = loadState()\r\n    try {\r\n        const serializedState = JSON.stringify({...prevState, ...state});\r\n        localStorage.setItem('team_project', serializedState);\r\n    } catch {\r\n\r\n    }\r\n};\r\n\r\n//types\r\ntype PacksLocalStorageType = {\r\n    packs: {\r\n        cardPacks: []\r\n        myPacks: boolean\r\n        page: number\r\n        pageCount: number\r\n        min: number\r\n        max: number\r\n        minCardsCount: number\r\n        maxCardsCount: number\r\n        sortPacksDirection: number\r\n        sortBy: string\r\n        user_id: string\r\n        packName: string\r\n        searchText: string\r\n        cardPacksTotalCount: number\r\n    }\r\n}\r\ntype CardsLocalStorageType = {\r\n    cards: CardsInitialStateType\r\n}\r\ntype localStorageStateType = PacksLocalStorageType | CardsLocalStorageType","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const AddCardModal: FC<AddPackModalPropsType> = memo(({closeAddPackModal, addNewCard}) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState('')\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        addNewCard(question, answer)\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditCard}>\r\n                <h2>Create new card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={onButtonClickHandler}>Add new card</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewCard: (question: string, answer: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        questionInput: {\r\n            width: '450px',\r\n        },\r\n        answerInput: {\r\n            width: '450px',\r\n            marginTop: '30px',\r\n        },\r\n        addNewCardModalButton: {\r\n            width: '150px',\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useCallback, useEffect, useState} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CardsInitialStateType, createCardTC, setPackTC} from '../../../bll/cards-reducer';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {CardsTable} from './cards/CardsTable';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {PacksInitialStateType} from '../../../bll/packs-reducer';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Button from '@material-ui/core/Button';\r\nimport {AddCardModal} from '../commonComponents/modal/addCardModal/AddCardModal';\r\nimport {trimmedString} from '../../../utils/trimmedString-util';\r\nimport s from './Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Cards: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const packID = useLocation().pathname.substring(6)\r\n    const cardsPack_id = cards.cardsPack_id\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [cardQuestion, setCardQuestion] = useState<string>('')\r\n    const [cardAnswer, setCardAnswer] = useState<string>('')\r\n    const [intervalId, setIntervalId] = useState<NodeJS.Timeout>()\r\n    const [addPackModal, setAddPackModal] = useState<boolean>(false)\r\n\r\n    let packName = cards.currentPackName\r\n    if (packs.cardPacks.length) {\r\n        packName = packs.cardPacks.filter(card => card._id === packID)[0].name\r\n    }\r\n    useEffect(() => {\r\n        saveState({\r\n            cards: {...cards, currentPackName: packName, cards: []}\r\n        })\r\n    }, [packName, cards])\r\n\r\n    useEffect(() => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: 1, pageCount: 5, cardQuestion: '', cardAnswer: ''}))\r\n        return function () {\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n        }\r\n    }, [dispatch, packID])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewCard = useCallback((question: string, answer: string) => {\r\n        dispatch(createCardTC({cardsPack_id, question, answer}))\r\n    }, [dispatch, cardsPack_id])\r\n\r\n    const searchQuestionHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardQuestion(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: value, cardAnswer, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [dispatch, intervalId, cardAnswer])\r\n\r\n    const searchAnswerHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardAnswer(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion, cardAnswer: value, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [dispatch, cardQuestion, intervalId])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {\r\n                addPackModal &&\r\n                <AddCardModal closeAddPackModal={closeAddPackModal}\r\n                              addNewCard={addNewCard}/>\r\n            }\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.arrowBackToPacks}\r\n                         onClick={onClickHandler}>\r\n                        <KeyboardBackspaceIcon/>\r\n                        <div className={s.titleBackToPacks}>\r\n                            <h3>Back to packs</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.packListHeading}>{trimmedString(packName, 50)}</div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={cardQuestion}\r\n                            dispatchHandler={searchQuestionHandler}\r\n                        />\r\n                        <Input\r\n                            placeholderValue={'Search by answer'}\r\n                            value={cardAnswer}\r\n                            dispatchHandler={searchAnswerHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewCardButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                            disabled={cards.packUserId !== idUser}\r\n                        >\r\n                            Add new card\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                        <CardsTable labelRowsPerPage={'Cards per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            padding: '0 12px',\r\n        },\r\n        paper: {\r\n            marginTop: '20px',\r\n            marginBottom: '60px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            minHeight: '600px',\r\n            minWidth: '1000px',\r\n        },\r\n        body: {\r\n            margin: '10px 12px',\r\n            padding: '0 12px',\r\n        },\r\n        addNewCardButton: {\r\n            width: '330px',\r\n        },\r\n        packsCardsFooter: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, CreatePackRequestType, PacksRequestDataType, PacksResponseType, PacksType} from '../dal/api';\r\nimport {packsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PacksType>,\r\n    myPacks: false,\r\n    page: 1,\r\n    pageCount: 5,\r\n    min: 0,\r\n    max: 110,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 110,\r\n    sortPacksDirection: 0,\r\n    sortBy: 'updated',\r\n    user_id: '',\r\n    packName: '',\r\n    searchText: '',\r\n    cardPacksTotalCount: 1,\r\n} as PacksInitialStateType\r\n\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): PacksInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'packs/SET-CARD-PACKS':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                myPacks: action.data.user_id.length > 1,\r\n                sortBy: action.data.sortPacks.slice(1),\r\n                sortPacksDirection: Number(action.data.sortPacks.substring(0, 1)),\r\n                searchText: action.data.packName,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardPacksAC = (data: PacksResponseType & NewCardsApiModelType) =>\r\n    ({type: 'packs/SET-CARD-PACKS', data} as const)\r\n\r\n\r\n//thunks\r\nexport const setCardPacksTC = (data?: PacksRequestDataType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newCardsApiModel = packsApiModel(getState().packs, data)\r\n\r\n        const pastPageCount = getState().packs.pageCount\r\n        const currentPage = getState().packs.page\r\n        const currentPageCount = newCardsApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newCardsApiModel.page\r\n\r\n        try {\r\n            const res = await cardPacksApi.fetchPacks({...newCardsApiModel, page: newPage})\r\n            dispatch(setCardPacksAC({...res.data, ...newCardsApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createPackTC = (data: CreatePackRequestType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await cardPacksApi.createPack(data)\r\n        dispatch(setCardPacksTC({packName: '', page: 1, sortPacks: '0updated'}))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (packId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deletePack(packId)\r\n            const cardsState = getState().packs\r\n            const remainPacks = cardsState.cardPacksTotalCount - (cardsState.pageCount * (cardsState.page - 1))\r\n            dispatch(setCardPacksTC({\r\n                page: remainPacks === 1\r\n                    ? cardsState.page === 1 ? cardsState.page : cardsState.page - 1\r\n                    : cardsState.page\r\n            }))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packID: string, name?: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.updatePack({_id: packID, name})\r\n            dispatch(setCardPacksTC({page: 1}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type PacksInitialStateType = PacksResponseType & {\r\n    myPacks: boolean\r\n    sortPacksDirection: number\r\n    sortBy: string\r\n    user_id: string\r\n    packName: string\r\n    searchText: string\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n}\r\ntype NewCardsApiModelType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\n\r\nexport type SetCardPacksActionType = ReturnType<typeof setCardPacksAC>\r\n\r\nexport type PacksActionsType =\r\n    | SetCardPacksActionType\r\n","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {PacksInitialStateType, setCardPacksTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport s from './NavBar.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const NavBar: FC = memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [sliderValue, setSliderValue] = useState<number[]>([packs.min, packs.max])\r\n\r\n    const onMyButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: id, min: 0, page: 1, pageCount: 5}))\r\n        setSliderValue([0, packs.max])\r\n    }\r\n\r\n    const onAllButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: '', min: sliderValue[0], max: sliderValue[1], page: 1, pageCount: 5}))\r\n    }\r\n\r\n    const changeSliderValue = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number[])\r\n    }\r\n\r\n    const changeSliderValueForPayload = () => {\r\n        dispatch(setCardPacksTC({min: sliderValue[0], max: sliderValue[1], page: 1}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid className={classes.navbar}>\r\n            <span className={classes.navbarShowPacksCards}>Show packs cards</span>\r\n\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" className={classes.navbarMyAllButtons}>\r\n                <Button onClick={onMyButtonClick}\r\n                        variant={packs.myPacks ? 'contained' : 'outlined'}>My</Button>\r\n                <Button onClick={onAllButtonClick}\r\n                        variant={packs.myPacks ? 'outlined' : 'contained'}>All</Button>\r\n            </ButtonGroup>\r\n\r\n            <div className={s.slider}>\r\n                <Slider\r\n                    value={sliderValue}\r\n                    max={packs.maxCardsCount}\r\n                    onChange={changeSliderValue}\r\n                    onChangeCommitted={changeSliderValueForPayload}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                />\r\n            </div>\r\n        </Grid>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        navbar: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            maxWidth: '200px',\r\n            minWidth: '200px',\r\n            backgroundColor: 'lightblue',\r\n            borderRadius: '4px 0px 0px 4px',\r\n        },\r\n        navbarShowPacksCards: {\r\n            fontSize: '20px',\r\n            fontWeight: 'bold',\r\n            marginTop: '10px',\r\n            marginBottom: '10px',\r\n        },\r\n        navbarMyAllButtons: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport {ProgressModalComponent} from '../progressModalComponent/ProgressModalComponent';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const LearnCardsModalAnswer: FC<LearnCardsModalPropsType> = memo(props => {\r\n\r\n    const {question, answer, packName, openNextRandomCard, closeAllModal} = props\r\n    const classes = useStyles()\r\n\r\n    const [grade, setGrade] = useState<number>(0)\r\n\r\n    const arrayOfGrades: GradeType = [\r\n        {valueOfGrade: 1, title: 'Did not know'},\r\n        {valueOfGrade: 2, title: 'Forgot'},\r\n        {valueOfGrade: 3, title: 'A lot of thought'},\r\n        {valueOfGrade: 4, title: 'Confused'},\r\n        {valueOfGrade: 5, title: 'Knew the answer'},\r\n    ]\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n    const onChangeCallback = (checkedValue: number) => {\r\n        if (grade === checkedValue) {\r\n            setGrade(0)\r\n        } else if (grade !== checkedValue) {\r\n            setGrade(checkedValue)\r\n        }\r\n    }\r\n\r\n    const nextButtonClickHandler = () => {\r\n        openNextRandomCard(grade === 0 ? 1 : grade)\r\n        setGrade(0)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByAnswer}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Answer: </b>{trimmedString(answer, 90)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>{'Rate yourself:'}</b>\r\n                </div>\r\n\r\n                <ProgressModalComponent/>\r\n                <FormGroup aria-label=\"position\"\r\n                           className={classes.optionsForRateYourself}>\r\n                    {\r\n                        arrayOfGrades.map((el, i) => {\r\n                            return <FormControlLabel\r\n                                key={i}\r\n                                name=\"myRadio\"\r\n                                control={<Radio name=\"myRadio\"\r\n                                                color=\"primary\"\r\n                                                checked={el.valueOfGrade === grade}\r\n                                                onClick={() => onChangeCallback(el.valueOfGrade)}/>}\r\n                                label={el.title}\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        })\r\n                    }\r\n                </FormGroup>\r\n\r\n                <Button\r\n                    className={classes.nextQuestionButton}\r\n                    color=\"primary\"\r\n                    variant={'contained'}\r\n                    onClick={nextButtonClickHandler}\r\n                >\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    question: string\r\n    answer: string\r\n    packName: string\r\n    openNextRandomCard: (grade: number) => void\r\n    closeAllModal: () => void\r\n}\r\ntype option = {\r\n    valueOfGrade: number\r\n    title: string\r\n}\r\ntype GradeType = option[]\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        optionsForRateYourself: {\r\n            margin: '5px 30px',\r\n            display: 'inline-flex',\r\n        },\r\n        nextQuestionButton: {\r\n            margin: '30px auto 0',\r\n            width: '100px',\r\n        },\r\n    }),\r\n);","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, GradeRequestType, OnePackType, CardsRequestType} from '../dal/api';\r\n\r\n\r\nconst initialState = [] as OnePackType[]\r\n\r\nexport type CardsForLearnInitialStateType = typeof initialState\r\n\r\nexport const cardsForLearnReducer = (state = initialState, action: CardsForLearnActionsType): CardsForLearnInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cardsForLearn/SET-CARDS-OF-PACK':\r\n            return [\r\n                ...action.data,\r\n            ]\r\n\r\n        case 'cardsForLearn/RESET-CARDS-OF-PACK':\r\n            return []\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardsOfPackAC = (data: OnePackType[]) =>\r\n    ({type: 'cardsForLearn/SET-CARDS-OF-PACK', data} as const)\r\n\r\nexport const resetCardsOfPackAC = () =>\r\n    ({type: 'cardsForLearn/RESET-CARDS-OF-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchCardsOfPackTC = (data: CardsRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const cardsOfPackApiModel = {\r\n            cardsPack_id: data.cardsPack_id,\r\n            pageCount: data.pageCount,\r\n        }\r\n        try {\r\n            const res = await cardPacksApi.fetchPack(cardsOfPackApiModel)\r\n            dispatch(setCardsOfPackAC(res.data.cards))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const updatedGradeTC = (data: GradeRequestType, pageCount: number): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await cardPacksApi.updatedGrade(data)\r\n            dispatch(fetchCardsOfPackTC({cardsPack_id: res.data.updatedGrade.cardsPack_id, pageCount}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetCardsOfPackActionType = ReturnType<typeof setCardsOfPackAC>\r\nexport type ResetCardsOfPackActionType = ReturnType<typeof resetCardsOfPackAC>\r\n\r\nexport type CardsForLearnActionsType =\r\n    | SetCardsOfPackActionType\r\n    | ResetCardsOfPackActionType\r\n","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const EditPackModal: FC<AddPackModalPropsType> = memo(({oldName, closeEditPackModal, updatePackName}) => {\r\n\r\n    const classes = useStyles()\r\n    const [newName, setNewName] = useState(oldName)\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        updatePackName(newName)\r\n        closeEditPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeEditPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddPack}>\r\n                <h2>Enter new name of pack</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"New name\"\r\n                    autoFocus\r\n                    value={newName}\r\n                    onChange={inputChangeHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={onButtonClickHandler}>RENAME</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    oldName: string\r\n    closeEditPackModal: () => void\r\n    updatePackName: (name?: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        addEditPackInput: {\r\n            margin: '30px 0 50px 0',\r\n        },\r\n    }),\r\n);","import React, {FC, memo} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const LearnCardsModalQuestion: FC<LearnCardsModalPropsType> = memo(props => {\r\n\r\n    const {packName, question, onAnswerButtonClick, closeAllModal} = props\r\n    const classes = useStyles()\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByQuestion}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <Button\r\n                    className={classes.showAnswerButton}\r\n                    color=\"primary\" variant={'contained'}\r\n                    onClick={onAnswerButtonClick}\r\n                >\r\n                    Show answer\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    packName: string\r\n    question: string\r\n    onAnswerButtonClick: () => void\r\n    closeAllModal: () => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        showAnswerButton: {\r\n            margin: '30px auto 0',\r\n            width: '160px',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo, MouseEvent, useCallback, useEffect, useState} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport {deletePackTC, PacksInitialStateType, setCardPacksTC, updatePackTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport Table from '@material-ui/core/Table';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport {LearnCardsModalAnswer} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalAnswer';\r\nimport {OnePackType} from '../../../../dal/api';\r\nimport {\r\n    CardsForLearnInitialStateType,\r\n    fetchCardsOfPackTC,\r\n    resetCardsOfPackAC,\r\n    updatedGradeTC\r\n} from '../../../../bll/learn-reducer';\r\nimport {EditPackModal} from '../../commonComponents/modal/editPackModal/EditPackModal';\r\nimport {LearnCardsModalQuestion} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalQuestion';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport s from './PacksListTable.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nconst getCard = (cards: OnePackType[]) => {\r\n    //const sumOfRepeats = cards.map(card => (6 - card.grade) ** 2).reduce((acc, el) => (acc + el), 0)\r\n    const sumOfRepeats = cards.reduce((acc, card) => (acc + (6 - card.grade) ** 2), 0)\r\n    const random = Math.random() * sumOfRepeats\r\n    let sum = 0\r\n    let i = 0\r\n    do {\r\n        sum = sum + ((6 - cards[i].grade) ** 2)\r\n        i++\r\n    } while (sum < random)\r\n    return cards[i - 1]\r\n}\r\n\r\n\r\nexport const PacksListTable: FC<PacksListTableProps> = memo(props => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const cardsForLearn = useSelector<AppRootStateType, CardsForLearnInitialStateType>(state => state.cardsForLearn)\r\n\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n    const [editPackData, setEditPackData] = useState({id: '', name: ''})\r\n    const [learnCardsModalQuestion, setLearnCardsModalQuestion] = useState(false)\r\n    const [learnCardsModalAnswer, setLearnCardsModalAnswer] = useState(false)\r\n\r\n    const [randomCard, setRandomCard] = useState({} as OnePackType)\r\n    const [name, setName] = useState('')\r\n    const [cardsCount, setCardsCount] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        if (cardsForLearn.length) {\r\n            setRandomCard(getCard(cardsForLearn))\r\n            setLearnCardsModalAnswer(false)\r\n            setLearnCardsModalQuestion(true)\r\n        }\r\n    }, [cardsForLearn])\r\n\r\n    const fetchAnswerQuestion = useCallback(() => {\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(true)\r\n    }, [])\r\n\r\n    const openNextRandomCard = useCallback((grade: number) => {\r\n        dispatch(updatedGradeTC({grade, card_id: randomCard._id}, cardsCount))\r\n    }, [dispatch, cardsCount, randomCard._id])\r\n\r\n    const closeAllModal = useCallback(() => {\r\n        dispatch(resetCardsOfPackAC())\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(false)\r\n    }, [dispatch])\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setCardPacksTC({page: newPage + 1}))\r\n    }, [dispatch])\r\n\r\n    const updatePackName = useCallback((newName?: string) => {\r\n        dispatch(updatePackTC(editPackData.id, newName))\r\n    }, [dispatch, editPackData.id])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (packs.sortPacksDirection === 0) {\r\n            dispatch(setCardPacksTC({sortPacks: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setCardPacksTC({sortPacks: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const onDeleteButtonClickHandler = (packId: string) => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setCardPacksTC({pageCount: parseInt(e.target.value)}))\r\n    }\r\n\r\n    const startLearning = async (cardsPack_id: string, pageCount: number, name: string) => {\r\n        await dispatch(fetchCardsOfPackTC({cardsPack_id, pageCount}))\r\n        setName(name)\r\n        setCardsCount(pageCount)\r\n    }\r\n\r\n    const openEditPackModal = (id: string, name: string) => {\r\n        setEditPackData({id, name})\r\n        setEditPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                learnCardsModalQuestion &&\r\n                <LearnCardsModalQuestion\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    onAnswerButtonClick={fetchAnswerQuestion}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                learnCardsModalAnswer &&\r\n                <LearnCardsModalAnswer\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    answer={randomCard.answer}\r\n                    openNextRandomCard={openNextRandomCard}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                editPackModal &&\r\n                <EditPackModal\r\n                    oldName={editPackData.name}\r\n                    closeEditPackModal={closeEditPackModal}\r\n                    updatePackName={updatePackName}\r\n                />\r\n            }\r\n            <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                <TableHead className={classes.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'name'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('name')}\r\n                            >\r\n                                Name\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'cardsCount'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('cardsCount')}\r\n                            >\r\n                                Cards\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'updated'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('updated')}\r\n                            >\r\n                                Last Updated\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'created'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('created')}\r\n                            >\r\n                                Created By\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        packs.cardPacks.map((cards) => (\r\n                                <TableRow key={cards._id}>\r\n                                    <TableCell component=\"th\">\r\n                                        <NavLink to={`/pack/${cards._id}`} className={classes.packsListTableBodyNavLink}>\r\n                                            {trimmedString(cards.name, 10)}\r\n                                        </NavLink>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{cards.cardsCount}</TableCell>\r\n                                    <TableCell align=\"right\">{updateDate(cards.updated)}</TableCell>\r\n                                    <TableCell align=\"right\">{trimmedString(cards.user_name, 10)}</TableCell>\r\n                                    <TableCell align=\"right\" style={{width: '224px'}}>\r\n                                                    <span className={classes.packsListTableBodyActionsSection}>\r\n                                                        {cards.user_id === id &&\r\n                                                        <span>\r\n                                                            <Button\r\n                                                                onClick={() => onDeleteButtonClickHandler(cards._id)}\r\n                                                                size={'small'}\r\n                                                                variant={'outlined'}\r\n                                                                color={'secondary'}>Delete</Button>\r\n                                                            <Button\r\n                                                                onClick={() => openEditPackModal(cards._id, cards.name)}\r\n                                                                size={'small'}\r\n                                                                variant={'outlined'}\r\n                                                                style={{margin: '0 10px'}}>Edit</Button>\r\n                                                        </span>\r\n                                                        }\r\n                                                        <Button\r\n                                                            onClick={() => startLearning(cards._id, cards.cardsCount, cards.name)}\r\n                                                            size={'small'}\r\n                                                            variant={'outlined'}\r\n                                                            disabled={cards.cardsCount === 0}\r\n                                                        >\r\n                                                            Learn\r\n                                                        </Button>\r\n                                                    </span>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        )\r\n                    }\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <td className={s.footerPage}>\r\n                            Page: {packs.page} (Total:{Math.ceil(packs.cardPacksTotalCount / packs.pageCount)})\r\n                        </td>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25, {\r\n                                label: 'All',\r\n                                value: packs.cardPacksTotalCount\r\n                            }]}\r\n                            colSpan={6}\r\n                            count={packs.cardPacksTotalCount}\r\n                            rowsPerPage={packs.pageCount}\r\n                            page={packs.page - 1}\r\n                            SelectProps={{\r\n                                inputProps: {'aria-label': 'rows per page'},\r\n                                native: true,\r\n                            }}\r\n                            labelRowsPerPage={props.labelRowsPerPage}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangePageCount}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n        </>\r\n    )\r\n})\r\n\r\ntype SortByType = 'name' | 'cardsCount' | 'updated' | 'created'\r\ntype PacksListTableProps = {\r\n    labelRowsPerPage: string\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        table: {\r\n            minWidth: '700px',\r\n        },\r\n        tableHead: {\r\n            backgroundColor: 'lightblue',\r\n        },\r\n        packsListTableBodyNavLink: {\r\n            textDecoration: 'none',\r\n            color: 'black'\r\n        },\r\n        packsListTableBodyActionsSection: {\r\n            display: 'flex',\r\n            width: '224px',\r\n            justifyContent: 'flex-end',\r\n        },\r\n        footerPage: {\r\n            display: 'flex',\r\n            height: '53px',\r\n            marginLeft: '10px',\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const AddPackModal: FC<AddPackModalPropsType> = memo(({closeAddPackModal, addNewPack}) => {\r\n\r\n    const classes = useStyles()\r\n    const [text, setText] = useState('')\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        addNewPack(text)\r\n        closeAddPackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddPack}>\r\n                <h2>Enter new pack name</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"Name\"\r\n                    autoFocus\r\n                    value={text}\r\n                    onChange={inputChangeHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={onButtonClickHandler}>Add new pack</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewPack: (newPackName: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        addEditPackInput: {\r\n            margin: '30px 0 50px 0',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {createPackTC, PacksInitialStateType, setCardPacksTC} from '../../../bll/packs-reducer';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport {NavBar} from './packs/NavBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {PacksListTable} from './packs/PacksListTable';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {AddPackModal} from '../commonComponents/modal/addPackModal/AddPackModal';\r\nimport s from '../cards/Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const PacksList: FC = memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n\r\n    const [addPackModal, setAddPackModal] = useState(false)\r\n    const [searchText, setSearchText] = useState<string>(packs.searchText)\r\n    const [intervalID, setIntervalID] = useState<NodeJS.Timeout>()\r\n\r\n    useEffect(() => {\r\n        dispatch(setCardPacksTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        saveState({\r\n            packs: {\r\n                cardPacks: [],\r\n                myPacks: packs.myPacks,\r\n                page: packs.page,\r\n                pageCount: packs.pageCount,\r\n                min: packs.min,\r\n                max: packs.max,\r\n                minCardsCount: packs.minCardsCount,\r\n                maxCardsCount: packs.maxCardsCount,\r\n                sortPacksDirection: packs.sortPacksDirection,\r\n                sortBy: packs.sortBy,\r\n                user_id: packs.user_id,\r\n                packName: packs.packName,\r\n                searchText: packs.searchText,\r\n                cardPacksTotalCount: packs.cardPacksTotalCount,\r\n            }\r\n        })\r\n    }, [packs])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewPack = useCallback((newPackName: string) => {\r\n        dispatch(createPackTC({cardsPack: {name: newPackName}}))\r\n    }, [dispatch])\r\n\r\n    const searchInputHandler = useCallback((value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setSearchText(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setCardPacksTC({packName: value, page: 1}))\r\n        }, 800)\r\n        setIntervalID(newIntervalID)\r\n    }, [dispatch, intervalID])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {addPackModal && <AddPackModal\r\n                closeAddPackModal={closeAddPackModal}\r\n                addNewPack={addNewPack}\r\n            />}\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <NavBar/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.packListHeading}>Packs list</div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={searchText}\r\n                            dispatchHandler={searchInputHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewPackButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                        >\r\n                            Add new pack\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                        <PacksListTable labelRowsPerPage={'Packs per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            padding: '0 12px',\r\n        },\r\n        paper: {\r\n            marginTop: '20px',\r\n            marginBottom: '60px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            minHeight: '600px',\r\n            minWidth: '1000px',\r\n        },\r\n        body: {\r\n            margin: '10px 12px',\r\n            padding: '0 12px',\r\n        },\r\n        addNewPackButton: {\r\n            width: '230px',\r\n            marginLeft: '20px',\r\n        },\r\n        packsCardsFooter: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);\r\n","import React, {FC, memo, useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Registration} from './components/auth/Registration';\r\nimport {Login} from './components/auth/Login';\r\nimport {ForgotPassword} from './components/auth/ForgotPassword';\r\nimport {Profile} from './components/profile/Profile';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './bll/store';\r\nimport {initializeAppTC} from './bll/app-reducer';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {NewPassword} from './components/auth/NewPassword';\r\nimport {PrivateRoute} from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\nimport {Header} from './components/header/Header';\r\nimport {Cards} from './components/main/cards/Cards';\r\nimport {PacksList} from './components/main/packsList/PacksList';\r\nimport {logoutTC} from './bll/auth-reducer';\r\n\r\n\r\nconst App: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button><NavLink to=\"/\">Home</NavLink></button>\r\n                <button><NavLink to=\"/\">Main</NavLink></button>\r\n                <button><NavLink to=\"/registration\">Register</NavLink></button>\r\n                <button><NavLink to=\"/login\">Login</NavLink></button>\r\n                <button><NavLink to=\"/changepassword\">Change Password</NavLink></button>\r\n                <button><NavLink to=\"/profile\">Profile</NavLink></button>\r\n                <span style={{color: `${isInitialized ? 'green' : 'red'}`}}> (INITIALIZED) </span>\r\n                <span style={{color: `${isLoggedIn ? 'green' : 'red'}`}}> (LOGIN) </span>\r\n                <span style={{color: `${isRegistered ? 'green' : 'red'}`}}> (REGISTERED) </span>\r\n                <button onClick={obLogOutClick}>LOGOUT</button>\r\n            </div>\r\n            <Header/>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <PacksList/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute exact path=\"/pack/:id\" isLoggedIn={isLoggedIn} render={() => <Cards/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>}\r\n                                  redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>}\r\n                                  redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, AuthActionsType} from './auth-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {PacksActionsType, packsReducer} from './packs-reducer';\r\nimport {loadState} from '../utils/localStorage-util';\r\nimport {PackActionsType, cardsReducer} from './cards-reducer';\r\nimport {CardsForLearnActionsType, cardsForLearnReducer} from './learn-reducer';\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    cardsForLearn: cardsForLearnReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, loadState(), applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | AuthActionsType\r\n    | AppActionsType\r\n    | PacksActionsType\r\n    | PackActionsType\r\n    | CardsForLearnActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrowBackToPacks\":\"Cards_arrowBackToPacks__zPAXp\",\"titleBackToPacks\":\"Cards_titleBackToPacks__3juqj\",\"packListHeading\":\"Cards_packListHeading__7eDx3\",\"inputButtonSection\":\"Cards_inputButtonSection__1O_C1\",\"footerPage\":\"Cards_footerPage__35Zfr\"};"],"sourceRoot":""}