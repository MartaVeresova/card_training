{"version":3,"sources":["components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.module.css","components/main/commonComponents/modal/ModalWindow.module.css","features/error404/Error404.module.css","components/main/commonComponents/TablePagination.module.css","components/main/packsList/packs/NavBar.module.css","components/main/packsList/packs/PacksListTable.module.css","bll/profile-reducer.ts","dal/api.ts","utils/changePasswordModel-util.ts","bll/auth-reducer.ts","bll/app-reducer.ts","features/errors/ErrorSnackbar.tsx","components/main/styles.ts","components/main/commonComponents/modal/progressModalComponent/ProgressModalComponent.tsx","components/auth/Registration.tsx","components/auth/Login.tsx","components/auth/ForgotPassword.tsx","components/profile/Profile.tsx","components/auth/NewPassword.tsx","features/privateRoute/PrivateRoute.tsx","features/error404/Error404.png","features/error404/Error404.tsx","components/header/Header.tsx","components/main/commonComponents/Input.tsx","utils/cardsApiModel-util.ts","bll/cards-reducer.ts","utils/trimmedString-util.ts","utils/updateDate-util.ts","components/main/commonComponents/TablePagination.tsx","components/main/commonComponents/modal/editCardModal/EditCardModal.tsx","components/main/commonComponents/modal/deleteCardModal/DeleteCardModal.tsx","components/main/cards/cards/CardsTableActions.tsx","assets/images/Empty_Star.png","assets/images/Blue_Star.png","components/main/cards/cards/CardsTable.tsx","utils/localStorage-util.ts","components/main/commonComponents/modal/addCardModal/AddCardModal.tsx","components/main/cards/Cards.tsx","bll/packs-reducer.ts","components/main/packsList/packs/NavBar.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalAnswer.tsx","bll/learn-reducer.ts","components/main/commonComponents/modal/editPackModal/EditPackModal.tsx","components/main/commonComponents/modal/learnCardsModal/LearnCardsModalQuestion.tsx","components/main/commonComponents/modal/deletePackModal/DeletePackModal.tsx","components/main/packsList/packs/PacksListTable.tsx","components/main/commonComponents/modal/addPackModal/AddPackModal.tsx","components/main/packsList/PacksList.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","components/main/cards/Cards.module.css"],"names":["module","exports","initialState","setProfileAC","data","type","payload","instance","axios","create","baseURL","withCredentials","authApi","post","delete","email","password","model","cardPacksApi","generateURL","Object","entries","forEach","el","newURL","slice","get","pack","id","put","cardsPack","card","changePasswordModel","from","message","isLoggedIn","isRegistered","changeProcess","newPasswordSet","setSignInAC","error","errorType","status","isInitialized","setAppErrorAC","setAppStatusAC","ErrorSnackbar","memo","dispatch","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","useStyles","makeStyles","theme","createStyles","authPaper","marginTop","spacing","display","flexDirection","alignItems","authAvatar","margin","backgroundColor","palette","secondary","main","authForm","width","authSubmit","authTextFieldStyle","height","ProgressModalComponent","appStatus","className","s","progressContainer","progressDiv","CircularProgress","Registration","classes","auth","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","values","a","response","resetForm","to","Container","component","maxWidth","CssBaseline","Avatar","Typography","variant","handleSubmit","noValidate","TextField","fullWidth","label","autoFocus","helperText","touched","errors","getFieldProps","Button","color","disabled","isValid","Grid","container","item","Link","RouterLink","Login","rememberMe","res","FormControlLabel","control","Checkbox","value","xs","ForgotPassword","Profile","profileData","profile","NewPassword","token","useParams","resetPasswordToken","info","setNewPasswordTC","PrivateRoute","Component","render","path","redirectTo","exact","Error404","history","useHistory","onClickHandler","useCallback","goBack","src","Error404Img","alt","size","onClick","Header","location","useLocation","useState","setValue","useEffect","pathname","AppBar","typo","Tabs","centered","Tab","push","icon","logoutButton","position","justifyContent","marginLeft","borderColor","marginRight","Input","props","placeholderValue","dispatchHandler","onChangeHandler","e","target","input","placeholder","onChange","packsApiModel","packs","apiModel","packName","sortPacks","JSON","stringify","sortPacksDirection","sortBy","page","pageCount","user_id","cardsApiModel","cards","cardAnswer","cardQuestion","cardsPack_id","sortCards","sortCardDirection","cardsTotalCount","minGrade","maxGrade","packUserId","currentPackName","searchTextAnswer","searchTexQuestion","showTitle","setPackAC","showTitleAC","setPackTC","getState","newPackApiModel","pastPageCount","currentPage","currentPageCount","newPage","Math","floor","trimmedString","str","number","length","substring","updateDate","cardUpdateDate","Date","toLocaleString","year","month","day","TablePaginationActions","count","rowsPerPage","onPageChange","useTheme","root","IconButton","aria-label","direction","ceil","EditCardModal","closeAddPackModal","editCard","question","setQuestion","answer","setAnswer","inputChangeHandlerQuestion","currentTarget","inputChangeHandlerAnswer","onButtonClickHandler","_id","onKeyPressHandler","key","darkWindow","windowByAddEditDeleteCard","questionInput","onKeyPress","answerInput","addNewCardModalButton","DeleteCardModal","closeDeleteCardModal","deleteCard","style","warningTitle","cancelAndDeleteButtons","deleteCardModalButton","CardsTableActions","editPackModal","setEditPackModal","deleteCardModal","setDeleteCardModal","closeEditPackModal","onDeleteButtonClick","TableCell","align","containerActionsButton","actionsButtonOfCards","padding","stars","emptyImage","emptyStarImg","blueImage","blueStarImg","rating","CardsTable","labelRowsPerPage","idUser","packID","handleChangePage","editCardHandler","editCardTC","deleteCardHandler","cardId","deleteCardTC","onClickSortHandler","sortValue","Table","table","TableHead","tableHead","TableRow","TableSortLabel","active","TableBody","map","updated","star","round","grade","toString","TableFooter","footerPage","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","onRowsPerPageChange","parseInt","ActionsComponent","minWidth","packsListTableBodyNavLink","textDecoration","packsListTableBodyActionsSection","loadState","serializedState","localStorage","getItem","parse","err","saveState","prevState","setItem","AddCardModal","addNewCard","Cards","setCardQuestion","setCardAnswer","intervalId","setIntervalId","addPackModal","setAddPackModal","cardPacks","filter","name","searchQuestionHandler","clearInterval","newIntervalID","setTimeout","searchAnswerHandler","Paper","paper","body","backToPackAndTitle","cursor","titleBackToPacks","packListHeading","inputButtonSection","addNewCardButton","TableContainer","packsCardsFooter","titleOfEmptyPack","marginBottom","minHeight","myPacks","minCardsCount","maxCardsCount","searchText","cardPacksTotalCount","setCardPacksAC","setCardPacksTC","newCardsApiModel","NavBar","sliderValue","setSliderValue","navbar","navbarShowPacksCards","ButtonGroup","navbarMyAllButtons","slider","Slider","newValue","onChangeCommitted","valueLabelDisplay","aria-labelledby","borderRadius","fontSize","fontWeight","LearnCardsModalAnswer","openNextRandomCard","closeAllModal","setGrade","windowByAnswer","nameOfPack","randomQuestionAndAnswer","FormGroup","optionsForRateYourself","valueOfGrade","title","labelPlacement","Radio","checked","checkedValue","nextQuestionButton","setCardsOfPackAC","fetchCardsOfPackTC","cardsOfPackApiModel","EditPackModal","oldName","updatePackName","newName","setNewName","inputChangeHandler","windowByAddDeletePack","addEditPackInput","LearnCardsModalQuestion","onAnswerButtonClick","windowByQuestion","showAnswerButton","DeletePackModal","closeDeletePackModal","deletePack","deletePackModalButton","PacksListTable","cardsForLearn","deletePackModal","setDeletePackModal","deletePackData","setDeletePackData","editPackData","setEditPackData","learnCardsModalQuestion","setLearnCardsModalQuestion","learnCardsModalAnswer","setLearnCardsModalAnswer","randomCard","setRandomCard","setName","cardsCount","setCardsCount","sumOfRepeats","reduce","acc","random","sum","i","getCard","fetchAnswerQuestion","card_id","updatedGrade","updatePackTC","onDeleteButtonClickHandler","packId","cardsState","remainPacks","startLearning","user_name","openDeletePackModal","openEditPackModal","AddPackModal","addNewPack","text","setText","PacksList","setSearchText","intervalID","setIntervalID","newPackName","searchInputHandler","addNewPackButton","App","top","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Number","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b64d8ca5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainer\":\"ProgressModalComponent_progressContainer__31zKT\",\"progressDiv\":\"ProgressModalComponent_progressDiv__2DadR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkWindow\":\"ModalWindow_darkWindow__2e69W\",\"windowByQuestion\":\"ModalWindow_windowByQuestion__296fI\",\"nameOfPack\":\"ModalWindow_nameOfPack__3wMa3\",\"randomQuestionAndAnswer\":\"ModalWindow_randomQuestionAndAnswer__vzcBf\",\"windowByAnswer\":\"ModalWindow_windowByAnswer__1AJbc\",\"windowByAddEditDeleteCard\":\"ModalWindow_windowByAddEditDeleteCard__1jzA1\",\"windowByAddDeletePack\":\"ModalWindow_windowByAddDeletePack__1ZVKS\",\"warningTitle\":\"ModalWindow_warningTitle__1o3lz\",\"cancelAndDeleteButtons\":\"ModalWindow_cancelAndDeleteButtons__3yO_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__3uIWn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TablePagination_root__8X0ET\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"NavBar_slider__SAJt2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerPage\":\"PacksListTable_footerPage__3kKea\"};","import {AuthResponseType} from '../dal/api';\r\n\r\nconst initialState = {} as ProfileStateType\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'profile/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\n\r\nexport const setProfileAC = (data: AuthResponseType) =>\r\n    ({type: 'profile/SET-PROFILE', payload: data} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\n//types\r\nexport type ProfileStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string,\r\n}\r\n\r\nexport type SetProfileActionType = ReturnType<typeof setProfileAC>\r\n\r\nexport type ProfileActionsType =\r\n    | SetProfileActionType","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<AuthResponseType>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.post<AuthResponseType>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`/auth/register`, {email, password})\r\n    },\r\n    changePassword(model: ChangePasswordModelType) {\r\n        return instance.post<ChangePasswordResponseType>(`auth/forgot`, model)\r\n    },\r\n    setNewPassword(model: SetNewPasswordType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', model)\r\n    },\r\n}\r\n\r\n\r\nexport const cardPacksApi = {\r\n    fetchPacks(payload?: PacksRequestDataType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PacksResponseType>(`cards/pack${newURL}`)\r\n    },\r\n    createPack(pack: CreatePackRequestType) {\r\n        return instance.post(`cards/pack`, pack)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePackRequestType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    fetchPack(payload: CardsRequestType) {\r\n        let generateURL = '?'\r\n        if (!!payload) {\r\n            Object.entries(payload).forEach(el => {\r\n                generateURL += el[0] + '=' + el[1] + '&'\r\n            })\r\n        }\r\n        const newURL = generateURL.slice(0, -1)\r\n        return instance.get<PackResponseType>(`/cards/card${newURL}`)\r\n    },\r\n    createCard(data: CreateCardType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    editCard(data: EditCardRequestType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    },\r\n    updatedGrade(payload: GradeRequestType) {\r\n        return instance.put<GradeResponseType>(`/cards/grade`, payload)\r\n    },\r\n}\r\n\r\n//login type\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type AuthResponseType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error?: string\r\n}\r\n//register type\r\nexport type RegisterResponseType = {\r\n    error?: string\r\n}\r\n//change password type\r\ntype ChangePasswordModelType = {\r\n    email: string,\r\n    from: string,\r\n    message: string,\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\ntype SetNewPasswordType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype SetNewPasswordResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\n\r\n//get packs type\r\nexport type PacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<PacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type PacksType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\n//create cards type\r\nexport type CreatePackRequestType = {\r\n    cardsPack: PackDataType\r\n}\r\nexport type PackDataType = {\r\n    name?: string | null\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\n//update cards type\r\nexport type UpdatePackRequestType = {\r\n    _id: string,\r\n    name?: string,\r\n}\r\n\r\n//get cards type\r\nexport type CardsRequestType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type PackResponseType = {\r\n    cards: Array<OnePackType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type OnePackType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n//create card type\r\nexport type CreateCardType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type EditCardRequestType = CreateCardType & {\r\n    _id: string\r\n}\r\n\r\n//update grade\r\nexport type GradeRequestType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\nexport type GradeResponseType = {\r\n    updatedGrade: GradeDataType\r\n}\r\nexport type GradeDataType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","export const changePasswordModel = (email: string) => {\r\n    return {\r\n        email: email,\r\n        from: \"Cards project <sf-minsk@outlook.com>\",\r\n        message:\r\n            `<div style=\"background-color: #9bf8d2; padding: 15px\">\r\n                    password recovery link:\r\n<!--                        <a href='http://localhost:3000/#/changepassword/newpassword/$token$'>click</a>-->\r\n                        <a href='https://MartaVeresova.github.io/learning_cards/#/changepassword/newpassword/$token$'>click</a>\r\n                </div>`,\r\n    }\r\n}","import {setProfileAC, SetProfileActionType} from './profile-reducer';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from './app-reducer';\r\nimport {AppThunk} from './store';\r\nimport {authApi, LoginParamsType} from '../dal/api';\r\nimport {changePasswordModel} from '../utils/changePasswordModel-util';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isRegistered: false,\r\n    changeProcess: false,\r\n    newPasswordSet: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'auth/SET-SIGN-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        case 'auth/SET-SIGN-UP':\r\n            return {...state, isRegistered: true}\r\n\r\n        case 'auth/CHANGE-PASSWORD':\r\n            return {...state, changeProcess: true}\r\n\r\n        case 'auth/SET-NEW-PASSWORD':\r\n            return {...state, newPasswordSet: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignInAC = (isLoggedIn: boolean) =>\r\n    ({type: 'auth/SET-SIGN-IN', isLoggedIn} as const)\r\n\r\nexport const setSignUpAC = () =>\r\n    ({type: 'auth/SET-SIGN-UP'} as const)\r\n\r\nexport const changePasswordAC = () =>\r\n    ({type: 'auth/CHANGE-PASSWORD'} as const)\r\n\r\nexport const setNewPasswordAC = () =>\r\n    ({type: 'auth/SET-NEW-PASSWORD'} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.login(data)\r\n        dispatch(setProfileAC(res.data))\r\n        dispatch(setSignInAC(true))\r\n    } catch (err) {\r\n        const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n        dispatch(setAppErrorAC(error))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.logout()\r\n        dispatch(setSignInAC(false))\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch((setAppStatusAC('succeeded')))\r\n    }\r\n}\r\n\r\nexport const setSignUpTC = (email: string, password: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.register(email, password)\r\n        dispatch(setSignUpAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const changePasswordTC = (email: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await authApi.changePassword(changePasswordModel(email))\r\n        dispatch(changePasswordAC())\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, token: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.setNewPassword({password, resetPasswordToken: token})\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setAppErrorAC(res.data.info, 'success'))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n}\r\n\r\n\r\n//types\r\nexport type SetSignInActionType = ReturnType<typeof setSignInAC>\r\nexport type SetSignUpActionType = ReturnType<typeof setSignUpAC>\r\nexport type ChangePasswordActionsType = ReturnType<typeof changePasswordAC>\r\nexport type SetNewPasswordActionTypes = ReturnType<typeof setNewPasswordAC>\r\n\r\nexport type AuthActionsType =\r\n    | SetSignInActionType\r\n    | SetProfileActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetSignUpActionType\r\n    | ChangePasswordActionsType\r\n    | SetNewPasswordActionTypes\r\n\r\n\r\n\r\n","import {setSignInAC, SetSignInActionType} from './auth-reducer';\r\nimport {AppThunk} from './store';\r\nimport {setProfileAC} from './profile-reducer';\r\nimport {authApi} from '../dal/api';\r\n\r\nconst initialState = {\r\n    error: null as string | null,\r\n    errorType: null as AppErrorType | null,\r\n    status: 'succeeded' as AppStatusType,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'app/SET-APP-ERROR':\r\n            return {...state, error: action.error, errorType: action.errorType}\r\n\r\n        case 'app/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'app/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null, errorType: AppErrorType | null = null) =>\r\n    ({type: 'app/SET-APP-ERROR', error, errorType} as const)\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) =>\r\n    ({type: 'app/SET-APP-STATUS', status} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'app/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authApi.me()\r\n        if (res.data) {\r\n            dispatch(setProfileAC(res.data))\r\n            dispatch(setSignInAC(true))\r\n            dispatch(setProfileAC(res.data))\r\n        }\r\n    } catch (err) {\r\n        // dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type AppStatusType = 'loading' | 'succeeded'\r\nexport type AppErrorType = 'error' | 'warning' | 'info' | 'success'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetSignInActionType\r\n    | SetIsInitializedActionType\r\n","import React, {FC, memo} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AppErrorType, setAppErrorAC} from '../../bll/app-reducer';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nexport const ErrorSnackbar: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const errorType = useSelector<AppRootStateType, AppErrorType | null>(state => state.app.errorType)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null, errorType))\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={errorType ? errorType : 'error'}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n})","import {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {Theme} from '@material-ui/core/styles/createTheme';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\r\n//login, registration, change password\r\n    authPaper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    authAvatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    authForm: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    authSubmit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    authTextFieldStyle: {\r\n        height: '65px',\r\n    },\r\n}))","import React, {FC, memo} from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport s from './ProgressModalComponent.module.css'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../../bll/store';\r\nimport {AppStatusType} from '../../../../../bll/app-reducer';\r\n\r\n\r\nexport const ProgressModalComponent: FC = memo(() => {\r\n\r\n    const appStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    return <>\r\n        {\r\n            appStatus === 'loading' &&\r\n            <div className={s.progressContainer}>\r\n                <div className={s.progressDiv}>\r\n                    <CircularProgress/>\r\n                </div>\r\n            </div>\r\n        }\r\n    </>\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport {Link as RouterLink, Redirect} from 'react-router-dom';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {setSignUpTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Registration: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setSignUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.authForm} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            margin=\"normal\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            error={formik.touched.password && !!formik.errors.password}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            type=\"password\"\r\n                            label=\"Confirm password\"\r\n                            margin=\"normal\"\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            fullWidth\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link component={RouterLink} to=\"/login\">\r\n                                    Do have an account? Sign In\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../bll/auth-reducer';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {Link as RouterLink} from 'react-router-dom'\r\nimport {AppStatusType} from '../../bll/app-reducer';\r\nimport * as Yup from 'yup';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const Login: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                //.min(8, 'Your password is too short')\r\n                .required('Password is required')\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        type=\"email\"\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link component={RouterLink} to=\"/changepassword\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link component={RouterLink} to=\"/registration\">\r\n                                Don't have an account? Sign Up\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {changePasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const ForgotPassword: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const changeProcess = useSelector<AppRootStateType, boolean>(state => state.auth.changeProcess)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is required'),\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.email))\r\n        },\r\n    })\r\n\r\n\r\n    if (!changeProcess) {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <ErrorSnackbar/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Password recovery\r\n                    </Typography>\r\n                    <ProgressModalComponent/>\r\n                    <form className={classes.authForm} onSubmit={formik.handleSubmit} noValidate>\r\n                        <TextField\r\n                            className={classes.authTextFieldStyle}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Enter your email address\"\r\n                            type=\"email\"\r\n                            autoFocus\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            error={formik.touched.email && !!formik.errors.email}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        <Button\r\n                            className={classes.authSubmit}\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!formik.isValid || status === 'loading'}\r\n                        >\r\n                            Recovery\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container component=\"div\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.authPaper}>\r\n                    <Avatar className={classes.authAvatar}>\r\n                        <LockOpenOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        CHECK YOUR EMAIL\r\n                    </Typography>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n})","import React, {FC, memo} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\n\r\n\r\nexport const Profile: FC = memo(() => {\r\n\r\n    const profileData = useSelector<AppRootStateType, string | null>(state => state.profile.email)\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar/>\r\n            Profile\r\n            <div>Your e-mail: {profileData}</div>\r\n        </>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ErrorSnackbar} from '../../features/errors/ErrorSnackbar';\r\nimport {setNewPasswordTC} from '../../bll/auth-reducer';\r\nimport {useStyles} from '../main/styles';\r\nimport {ProgressModalComponent} from '../main/commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\n\r\n\r\nexport const NewPassword: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const newPasswordSet = useSelector<AppRootStateType, boolean>(state => state.auth.newPasswordSet)\r\n    const token = useParams<{ token: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(8, 'Must be 8 characters or more')\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password')], 'Passwords must match')\r\n                .required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token.token))\r\n        },\r\n    })\r\n\r\n    if (newPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"div\" maxWidth=\"xs\">\r\n            <ErrorSnackbar/>\r\n            <CssBaseline/>\r\n            <div className={classes.authPaper}>\r\n                <Avatar className={classes.authAvatar}>\r\n                    <LockOpenOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Enter new password\r\n                </Typography>\r\n                <ProgressModalComponent/>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        autoFocus\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    <TextField\r\n                        className={classes.authTextFieldStyle}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Confirm password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                        error={formik.touched.confirmPassword && !!formik.errors.confirmPassword}\r\n                        {...formik.getFieldProps('confirmPassword')}\r\n                    />\r\n                    <Button\r\n                        className={classes.authSubmit}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        SET NEW PASSWORD\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n})\r\n","import React, {FC, memo, ReactElement} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\n\r\nexport const PrivateRoute: FC<PropsType> = memo(({render: Component, isLoggedIn, path, redirectTo}) => {\r\n\r\n\r\n    return (\r\n        <Route exact path={path} render={() => isLoggedIn\r\n            ? <Component/>\r\n            : <Redirect to={redirectTo}/>\r\n        }/>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    render: () => ReactElement\r\n    isLoggedIn: boolean\r\n    exact?: boolean | undefined\r\n    path: string\r\n    redirectTo: string\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {FC, memo, useCallback} from 'react'\r\nimport Error404Img from './Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nexport const Error404: FC = memo(() => {\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useEffect, useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport {logoutTC} from '../../bll/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport AccountCircleOutlined from '@material-ui/icons/AccountCircleOutlined';\r\nimport DynamicFeedOutlined from '@material-ui/icons/DynamicFeedOutlined';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Header: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/profile') {\r\n            setValue(1)\r\n        } else {\r\n            setValue(0)\r\n        }\r\n    }, [location, value])\r\n\r\n    const onPacksClickHandler = () => {\r\n        setValue(0)\r\n        history.push('/')\r\n    }\r\n    const onProfileClickHandler = () => {\r\n        setValue(1)\r\n        history.push('/profile')\r\n    }\r\n    const obLogOutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return <>\r\n        <AppBar className={classes.app}>\r\n            <Typography className={classes.typo} variant={'h6'}>\r\n                CARDS\r\n            </Typography>\r\n            {\r\n                isLoggedIn ?\r\n                    <>\r\n                        <Tabs\r\n                            value={value}\r\n                            centered\r\n                        >\r\n                            <Tab onClick={onPacksClickHandler}\r\n                                 label={'Packs List'}\r\n                                 icon={<DynamicFeedOutlined/>}/>\r\n                            <Tab onClick={onProfileClickHandler}\r\n                                 label={'Profile'}\r\n                                 icon={<AccountCircleOutlined/>}/>\r\n                        </Tabs>\r\n                        <Button className={classes.logoutButton}\r\n                                onClick={obLogOutClick}\r\n                                variant=\"outlined\"\r\n                        >\r\n                            LOGOUT\r\n                        </Button>\r\n                    </> : null\r\n            }\r\n        </AppBar>\r\n    </>\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        app: {\r\n            position: 'static',\r\n            flexDirection: 'row',\r\n            display: 'flex',\r\n            height: '72px',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n        },\r\n        typo: {\r\n            marginLeft: '10px',\r\n        },\r\n        logoutButton: {\r\n            color: 'white',\r\n            borderColor: 'white',\r\n            marginRight: '10px',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Input: FC<InputSearchPropsType> = memo( props => {\r\n\r\n    const {placeholderValue, value, dispatchHandler} = props\r\n    const classes = useStyles()\r\n\r\n    const onChangeHandler = async (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatchHandler(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <TextField\r\n            className={classes.input}\r\n            placeholder={placeholderValue ? placeholderValue : 'Search'}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            size=\"small\"\r\n            onChange={onChangeHandler}\r\n            value={value}\r\n        />\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype InputSearchPropsType = {\r\n    placeholderValue: string\r\n    value: string\r\n    dispatchHandler: (value: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        input: {\r\n            height: '40px',\r\n            marginRight: '15px'\r\n        },\r\n    }),\r\n);","import {CardsRequestType, PacksRequestDataType} from '../dal/api';\r\nimport {PacksInitialStateType} from \"../bll/packs-reducer\";\r\nimport {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const packsApiModel = (packs: PacksInitialStateType, data?: PacksRequestDataType) => {\r\n    const apiModel = {\r\n        packName: packs.packName,\r\n        min: packs.min,\r\n        max: packs.max,\r\n        sortPacks: JSON.stringify(packs.sortPacksDirection) + packs.sortBy,\r\n        page: packs.page,\r\n        pageCount: packs.pageCount,\r\n        user_id: packs.user_id,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\nexport const cardsApiModel = (cards: CardsInitialStateType, data?: CardsRequestType) => {\r\n    const apiModel = {\r\n        cardAnswer: cards.cardAnswer,\r\n        cardQuestion: cards.cardQuestion,\r\n        cardsPack_id: cards.cardsPack_id,\r\n        min: cards.min,\r\n        max: cards.max,\r\n        sortCards: JSON.stringify(cards.sortCardDirection) + cards.sortBy,\r\n        page: cards.page,\r\n        pageCount: cards.pageCount,\r\n    }\r\n    return {...apiModel, ...data}\r\n}\r\n\r\n","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {\r\n    cardPacksApi,\r\n    CardsRequestType,\r\n    CreateCardType,\r\n    EditCardRequestType,\r\n    OnePackType,\r\n    PackResponseType\r\n} from '../dal/api';\r\nimport {cardsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<OnePackType>,\r\n    cardsTotalCount: 1,\r\n    minGrade: 0,\r\n    maxGrade: 5,\r\n    page: 1,\r\n    pageCount: 5,\r\n    packUserId: '',\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    min: 0,\r\n    max: 5,\r\n    sortCardDirection: 0,\r\n    sortBy: 'updated',\r\n    cardsPack_id: '',\r\n    currentPackName: 'Pack name',\r\n    searchTextAnswer: '',\r\n    searchTexQuestion: '',\r\n    showTitle: false,\r\n} as CardsInitialStateType\r\n\r\n\r\nexport const cardsReducer = (state = initialState, action: PackActionsType): CardsInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cards/SET-PACK':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                sortBy: action.data.sortCards.slice(1),\r\n                sortCardDirection: Number(action.data.sortCards.substring(0, 1)),\r\n                searchTextAnswer: action.data.cardAnswer,\r\n                searchTexQuestion: action.data.cardQuestion,\r\n            }\r\n\r\n        case 'cards/RESET-PACK':\r\n            return {\r\n                ...state,\r\n                cards: [],\r\n            }\r\n\r\n        case 'cards/SHOW-TITLE':\r\n            return {\r\n                ...state,\r\n                showTitle: action.value\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setPackAC = (data: PackResponseType & NewPackApiModelType) =>\r\n    ({type: 'cards/SET-PACK', data} as const)\r\nexport const resetPackAC = () =>\r\n    ({type: 'cards/RESET-PACK'} as const)\r\nexport const showTitleAC = (value: boolean) =>\r\n    ({type: 'cards/SHOW-TITLE', value} as const)\r\n\r\n\r\n//thunks\r\nexport const setPackTC = (data: CardsRequestType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newPackApiModel = cardsApiModel(getState().cards, data)\r\n        const pastPageCount = getState().cards.pageCount\r\n        const currentPage = getState().cards.page\r\n        const currentPageCount = newPackApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newPackApiModel.page\r\n        try {\r\n            const res = await cardPacksApi.fetchPack({...newPackApiModel, page: newPage})\r\n            dispatch(setPackAC({...res.data, ...newPackApiModel, page: newPage}))\r\n            dispatch(showTitleAC(true))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\nexport const createCardTC = (data: CreateCardType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.createCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id, page: 1, sortCards: '0updated',}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\nexport const deleteCardTC = (cardsPack_id: string, cardId: string): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deleteCard(cardId)\r\n            dispatch(setPackTC({cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\nexport const editCardTC = (data: EditCardRequestType): AppThunk =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.editCard({...data})\r\n            dispatch(setPackTC({cardsPack_id: data.cardsPack_id}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type CardsInitialStateType = PackResponseType & {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    min: number\r\n    max: number\r\n    sortCardDirection: number\r\n    sortBy: string\r\n    cardsPack_id: string\r\n    currentPackName: string\r\n    searchTextAnswer: string\r\n    searchTexQuestion: string\r\n    showTitle: boolean\r\n}\r\ntype NewPackApiModelType = {\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    cardsPack_id: string\r\n    min: number\r\n    max: number\r\n    sortCards: string\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type SetPackActionType = ReturnType<typeof setPackAC>\r\nexport type ResetPackActionType = ReturnType<typeof resetPackAC>\r\nexport type ShowTitleActionType = ReturnType<typeof showTitleAC>\r\n\r\nexport type PackActionsType =\r\n    | SetPackActionType\r\n    | ResetPackActionType\r\n    | ShowTitleActionType","export const trimmedString = (str: string, number: number) => {\r\n    if (str.length > number) {\r\n        return str.substring(0, number) + '...'\r\n    } else {\r\n        return str\r\n    }\r\n}","export const updateDate = (cardUpdateDate: string) => {\r\n    let formattedDate = new Date(cardUpdateDate)\r\n    return formattedDate.toLocaleString('es', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: 'numeric',\r\n    })\r\n}","import React, {memo, MouseEvent} from 'react';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport s from './TablePagination.module.css'\r\n\r\n\r\nexport const TablePaginationActions = memo((props: TablePaginationActionsProps) => {\r\n\r\n    const {count, rowsPerPage, page, onPageChange} = props\r\n    const theme = useTheme()\r\n\r\n    const handleFirstPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onPageChange(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={s.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype TablePaginationActionsProps = {\r\n    count: number\r\n    rowsPerPage: number\r\n    page: number\r\n    onPageChange: (e: MouseEvent<HTMLButtonElement>, newPage: number) => void\r\n}","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {EditCardRequestType, OnePackType} from '../../../../../dal/api';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const EditCardModal: FC<EditPackModalPropsType> = memo(({closeAddPackModal, card, editCard}) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState(card.question)\r\n    const [answer, setAnswer] = useState(card.answer)\r\n\r\n    const inputChangeHandlerQuestion = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setQuestion(e.currentTarget.value), [])\r\n\r\n    const inputChangeHandlerAnswer = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setAnswer(e.currentTarget.value), [])\r\n\r\n    const onButtonClickHandler = useCallback(() => {\r\n        editCard({cardsPack_id: card.cardsPack_id, _id: card._id, answer, question})\r\n        closeAddPackModal()\r\n    }, [card, answer, question, editCard, closeAddPackModal])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLDivElement>) =>\r\n        (e.key === 'Enter') && onButtonClickHandler(), [onButtonClickHandler])\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditDeleteCard}>\r\n                <h2>Edit card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    onClick={onButtonClickHandler}>Save changes</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype EditPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        questionInput: {\r\n            width: '450px',\r\n        },\r\n        answerInput: {\r\n            width: '450px',\r\n            marginTop: '30px',\r\n        },\r\n        addNewCardModalButton: {\r\n            width: '150px',\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const DeleteCardModal: FC<DeleteCardModalPropsType> = memo(props => {\r\n\r\n    const {closeDeleteCardModal, deleteCard} = props\r\n    const classes = useStyles()\r\n\r\n    const onButtonClickHandler = () => {\r\n        deleteCard()\r\n        closeDeleteCardModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeDeleteCardModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditDeleteCard} style={{height: '210px'}}>\r\n                <h2>Delete Pack</h2>\r\n                <p className={s.warningTitle}>Do you really want to remove this card?</p>\r\n                <div className={s.cancelAndDeleteButtons}>\r\n                    <Button\r\n                        className={classes.deleteCardModalButton}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        onClick={closeDeleteCardModal}>Cancel</Button>\r\n                    <Button\r\n                        className={classes.deleteCardModalButton}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        onClick={onButtonClickHandler}\r\n                    >Delete</Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype DeleteCardModalPropsType = {\r\n    closeDeleteCardModal: () => void\r\n    deleteCard: () => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        deleteCardModalButton: {\r\n            width: '100px',\r\n            margin: '45px 70px 0',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {EditCardModal} from '../../commonComponents/modal/editCardModal/EditCardModal';\r\nimport {EditCardRequestType, OnePackType} from '../../../../dal/api';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {DeleteCardModal} from '../../commonComponents/modal/deleteCardModal/DeleteCardModal';\r\n\r\n\r\nexport const CardsTableActions: FC<PackTableActionsPropsType> = memo(props => {\r\n\r\n    const {deleteCard, editCard, card} = props\r\n\r\n    const classes = useStyles()\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n    const [deleteCardModal, setDeleteCardModal] = useState(false)\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const closeDeleteCardModal = useCallback(() => {\r\n        setDeleteCardModal(false)\r\n    }, [])\r\n\r\n    const onDeleteButtonClick = useCallback(() => {\r\n        deleteCard(card._id)\r\n    }, [card, deleteCard])\r\n\r\n    const openEditPackModal = () => {\r\n        setEditPackModal(true)\r\n    }\r\n\r\n    const openDeleteCardModal = () => {\r\n        setDeleteCardModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <TableCell align=\"right\" className={classes.containerActionsButton}>\r\n            {\r\n                editPackModal &&\r\n                <EditCardModal\r\n                    closeAddPackModal={closeEditPackModal}\r\n                    editCard={editCard}\r\n                    card={card}/>\r\n            }\r\n            {\r\n                deleteCardModal &&\r\n                <DeleteCardModal\r\n                    deleteCard={onDeleteButtonClick}\r\n                    closeDeleteCardModal={closeDeleteCardModal}\r\n                />\r\n            }\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={openDeleteCardModal}\r\n            >DELETE</Button>\r\n            <Button\r\n                className={classes.actionsButtonOfCards}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={openEditPackModal}\r\n            >EDIT</Button>\r\n        </TableCell>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype PackTableActionsPropsType = {\r\n    deleteCard: (cardId: string) => void\r\n    editCard: (data: EditCardRequestType) => void\r\n    card: OnePackType\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        actionsButtonOfCards: {\r\n            marginRight: '10px',\r\n        },\r\n        containerActionsButton: {\r\n            width: '166px',\r\n            padding: '16px 0',\r\n        },\r\n    }),\r\n);","export default __webpack_public_path__ + \"static/media/Empty_Star.a9483ca3.png\";","export default __webpack_public_path__ + \"static/media/Blue_Star.04d5ce3f.png\";","import React, {ChangeEvent, FC, memo, MouseEvent, useCallback, useEffect} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport {CardsInitialStateType, deleteCardTC, editCardTC, resetPackAC, setPackTC} from '../../../../bll/cards-reducer';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Table from '@material-ui/core/Table';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {CardsTableActions} from './CardsTableActions';\r\nimport {EditCardRequestType} from '../../../../dal/api';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport s from '../Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport emptyStarImg from '../../../../assets/images/Empty_Star.png'\r\nimport blueStarImg from '../../../../assets/images/Blue_Star.png'\r\n\r\n\r\nconst stars: RatingStarsType[] = [\r\n    {emptyImage: emptyStarImg, blueImage: blueStarImg, rating: 1},\r\n    {emptyImage: emptyStarImg, blueImage: blueStarImg, rating: 2},\r\n    {emptyImage: emptyStarImg, blueImage: blueStarImg, rating: 3},\r\n    {emptyImage: emptyStarImg, blueImage: blueStarImg, rating: 4},\r\n    {emptyImage: emptyStarImg, blueImage: blueStarImg, rating: 5},\r\n]\r\n\r\nexport const CardsTable: FC<PackNameTableProps> = memo(({labelRowsPerPage}) => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packID = useLocation().pathname.substring(6)\r\n\r\n    useEffect(() => {\r\n        return function () {\r\n            dispatch(resetPackAC())\r\n        }\r\n    }, [dispatch])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: newPage + 1}))\r\n    }, [dispatch, packID])\r\n\r\n    const editCardHandler = useCallback((data: EditCardRequestType) => {\r\n        dispatch(editCardTC({...data}))\r\n    }, [dispatch])\r\n\r\n    const deleteCardHandler = useCallback((cardId: string) => {\r\n        dispatch(deleteCardTC(cards.cardsPack_id, cardId))\r\n    }, [dispatch, cards.cardsPack_id])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (cards.sortCardDirection === 0) {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setPackTC({cardsPack_id: packID, sortCards: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setPackTC({cardsPack_id: packID, pageCount: parseInt(e.target.value, 10)}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n            <TableHead className={classes.tableHead}>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'question'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('question')}\r\n                        >\r\n                            Question\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'answer'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('answer')}\r\n                        >\r\n                            Answer\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'updated'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('updated')}\r\n                        >\r\n                            Last Updated\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <TableSortLabel\r\n                            active={cards.sortBy === 'grade'}\r\n                            direction={cards.sortCardDirection === 1 ? 'desc' : 'asc'}\r\n                            onClick={() => onClickSortHandler('grade')}\r\n                        >\r\n                            Grade\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Actions\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    cards.cards.map(card =>\r\n                        <TableRow key={card._id}>\r\n                            <TableCell component=\"th\">{trimmedString(card.question, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{trimmedString(card.answer, 20)}</TableCell>\r\n                            <TableCell align=\"right\">{updateDate(card.updated)}</TableCell>\r\n                            <TableCell align=\"right\">\r\n                                {\r\n                                    stars.map(star =>\r\n                                        <img key={star.rating.toString()}\r\n                                             src={Math.round(card.grade) >= star.rating ? star.blueImage : star.emptyImage}\r\n                                             style={{width: '18px'}}\r\n                                             alt=\"grades rating\"/>\r\n                                    )\r\n                                }\r\n                            </TableCell>\r\n                            {card.user_id === idUser\r\n                                ? <CardsTableActions\r\n                                    deleteCard={deleteCardHandler}\r\n                                    editCard={editCardHandler}\r\n                                    card={card}/>\r\n                                : <TableCell/>}\r\n                        </TableRow>\r\n                    )\r\n                }\r\n            </TableBody>\r\n            {\r\n                cards.cardsTotalCount > 5 &&\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <td className={s.footerPage}>\r\n                            Page: {cards.page} (Total:{Math.ceil(cards.cardsTotalCount / cards.pageCount)})\r\n                        </td>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25, {\r\n                                label: 'All',\r\n                                value: cards.cardsTotalCount\r\n                            }]}\r\n                            colSpan={6}\r\n                            count={cards.cardsTotalCount}\r\n                            rowsPerPage={cards.pageCount}\r\n                            page={cards.page - 1}\r\n                            SelectProps={{\r\n                                inputProps: {'aria-label': 'rows per page'},\r\n                                native: true,\r\n                            }}\r\n                            labelRowsPerPage={labelRowsPerPage}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangePageCount}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            }\r\n        </Table>\r\n    )\r\n})\r\n\r\ntype SortByType = 'question' | 'answer' | 'updated' | 'grade'\r\ntype PackNameTableProps = {\r\n    labelRowsPerPage: string\r\n}\r\ntype RatingStarsType = {\r\n    emptyImage: string\r\n    blueImage: string\r\n    rating: number\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        table: {\r\n            minWidth: '700px',\r\n        },\r\n        tableHead: {\r\n            backgroundColor: 'lightblue',\r\n        },\r\n        packsListTableBodyNavLink: {\r\n            textDecoration: 'none',\r\n            color: 'black'\r\n        },\r\n        packsListTableBodyActionsSection: {\r\n            display: 'flex',\r\n            width: '224px',\r\n            justifyContent: 'flex-end',\r\n        },\r\n        footerPage: {\r\n            display: 'flex',\r\n            height: '53px',\r\n            marginLeft: '10px',\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);","import {CardsInitialStateType} from '../bll/cards-reducer';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('team_project');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: localStorageStateType) => {\r\n    const prevState = loadState()\r\n    try {\r\n        const serializedState = JSON.stringify({...prevState, ...state});\r\n        localStorage.setItem('team_project', serializedState);\r\n    } catch {\r\n\r\n    }\r\n};\r\n\r\n//types\r\ntype PacksLocalStorageType = {\r\n    packs: {\r\n        cardPacks: []\r\n        myPacks: boolean\r\n        page: number\r\n        pageCount: number\r\n        min: number\r\n        max: number\r\n        minCardsCount: number\r\n        maxCardsCount: number\r\n        sortPacksDirection: number\r\n        sortBy: string\r\n        user_id: string\r\n        packName: string\r\n        searchText: string\r\n        cardPacksTotalCount: number\r\n    }\r\n}\r\ntype CardsLocalStorageType = {\r\n    cards: CardsInitialStateType\r\n}\r\ntype localStorageStateType = PacksLocalStorageType | CardsLocalStorageType","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const AddCardModal: FC<AddPackModalPropsType> = memo(({closeAddPackModal, addNewCard}) => {\r\n\r\n    const classes = useStyles()\r\n    const [question, setQuestion] = useState('')\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    const onButtonClickHandler = useCallback(() => {\r\n        addNewCard(question, answer)\r\n        closeAddPackModal()\r\n    }, [question, answer, addNewCard, closeAddPackModal])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLDivElement>) =>\r\n        (e.key === 'Enter') && onButtonClickHandler(), [onButtonClickHandler])\r\n\r\n    const inputChangeHandlerQuestion = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setQuestion(e.currentTarget.value), [])\r\n\r\n    const inputChangeHandlerAnswer = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setAnswer(e.currentTarget.value), [])\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditDeleteCard}>\r\n                <h2>Create new card</h2>\r\n                <TextField\r\n                    className={classes.questionInput}\r\n                    label=\"Question\"\r\n                    margin=\"none\"\r\n                    variant=\"outlined\"\r\n                    autoFocus\r\n                    value={question}\r\n                    onChange={inputChangeHandlerQuestion}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <TextField\r\n                    className={classes.answerInput}\r\n                    label=\"Answer\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={answer}\r\n                    onChange={inputChangeHandlerAnswer}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <Button\r\n                    className={classes.addNewCardModalButton}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    onClick={onButtonClickHandler}>Add new card</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewCard: (question: string, answer: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        questionInput: {\r\n            width: '450px',\r\n        },\r\n        answerInput: {\r\n            width: '450px',\r\n            marginTop: '30px',\r\n        },\r\n        addNewCardModalButton: {\r\n            width: '150px',\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useCallback, useEffect, useState} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CardsInitialStateType, createCardTC, setPackTC, showTitleAC} from '../../../bll/cards-reducer';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport {CardsTable} from './cards/CardsTable';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {PacksInitialStateType} from '../../../bll/packs-reducer';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Button from '@material-ui/core/Button';\r\nimport {AddCardModal} from '../commonComponents/modal/addCardModal/AddCardModal';\r\nimport {trimmedString} from '../../../utils/trimmedString-util';\r\nimport s from './Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const Cards: FC = memo(() => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const cards = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const packID = useLocation().pathname.substring(6)\r\n    const cardsPack_id = cards.cardsPack_id\r\n    const idUser = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [cardQuestion, setCardQuestion] = useState('')\r\n    const [cardAnswer, setCardAnswer] = useState('')\r\n    const [intervalId, setIntervalId] = useState<NodeJS.Timeout>()\r\n    const [addPackModal, setAddPackModal] = useState(false)\r\n\r\n    let packName = cards.currentPackName\r\n    if (packs.cardPacks.length) {\r\n        packName = packs.cardPacks.filter(card => card._id === packID)[0].name\r\n    }\r\n    useEffect(() => {\r\n        saveState({\r\n            cards: {...cards, currentPackName: packName, cards: []}\r\n        })\r\n    }, [packName, cards])\r\n\r\n    useEffect(() => {\r\n        dispatch(setPackTC({cardsPack_id: packID, page: 1, pageCount: 5, cardQuestion: '', cardAnswer: ''}))\r\n        return function () {\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n            dispatch(showTitleAC(false))\r\n        }\r\n    }, [dispatch, packID])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewCard = useCallback((question: string, answer: string) => {\r\n        dispatch(createCardTC({cardsPack_id, question, answer}))\r\n    }, [dispatch, cardsPack_id])\r\n\r\n    const searchQuestionHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardQuestion(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion: value, cardAnswer, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [dispatch, intervalId, cardAnswer])\r\n\r\n    const searchAnswerHandler = useCallback((value: string) => {\r\n        if (intervalId) {\r\n            clearInterval(intervalId)\r\n        }\r\n        setCardAnswer(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setPackTC({cardQuestion, cardAnswer: value, page: 1}))\r\n        }, 800)\r\n        setIntervalId(newIntervalID)\r\n    }, [dispatch, cardQuestion, intervalId])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {\r\n                addPackModal &&\r\n                <AddCardModal closeAddPackModal={closeAddPackModal}\r\n                              addNewCard={addNewCard}/>\r\n            }\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.backToPackAndTitle}>\r\n                        <KeyboardBackspaceIcon onClick={onClickHandler} style={{cursor: 'pointer'}}/>\r\n                        <h3 className={s.titleBackToPacks}>Back to packs</h3>\r\n                        <div className={s.packListHeading}>{trimmedString(packName, 50)}</div>\r\n                    </div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={cardQuestion}\r\n                            dispatchHandler={searchQuestionHandler}\r\n                        />\r\n                        <Input\r\n                            placeholderValue={'Search by answer'}\r\n                            value={cardAnswer}\r\n                            dispatchHandler={searchAnswerHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewCardButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                            disabled={cards.packUserId !== idUser}\r\n                        >\r\n                            Add new card\r\n                        </Button>\r\n                    </div>\r\n\r\n                    {\r\n                        cards.showTitle\r\n                            ? cards.cardsTotalCount > 0\r\n                                ? <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                                        <CardsTable labelRowsPerPage={'Cards per page'}/>\r\n                                    </TableContainer>\r\n                                : <div className={s.titleOfEmptyPack}>\r\n                                    {cards.packUserId === idUser\r\n                                        ? <p>This pack is empty. Click Add new card to fill this pack.</p>\r\n                                        : <p>This pack is empty. Wait for it to fill up.</p>}\r\n                                </div>\r\n                            : null\r\n                    }\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            padding: '0 12px',\r\n        },\r\n        paper: {\r\n            marginTop: '20px',\r\n            marginBottom: '60px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            minHeight: '600px',\r\n            minWidth: '1000px',\r\n        },\r\n        body: {\r\n            margin: '10px 12px',\r\n            padding: '0 12px',\r\n        },\r\n        addNewCardButton: {\r\n            width: '330px',\r\n        },\r\n        packsCardsFooter: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import {AppRootStateType, AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, CreatePackRequestType, PacksRequestDataType, PacksResponseType, PacksType} from '../dal/api';\r\nimport {packsApiModel} from '../utils/cardsApiModel-util';\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PacksType>,\r\n    myPacks: false,\r\n    page: 1,\r\n    pageCount: 5,\r\n    min: 0,\r\n    max: 110,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 110,\r\n    sortPacksDirection: 0,\r\n    sortBy: 'updated',\r\n    user_id: '',\r\n    packName: '',\r\n    searchText: '',\r\n    cardPacksTotalCount: 1,\r\n} as PacksInitialStateType\r\n\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): PacksInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'packs/SET-CARD-PACKS':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                myPacks: action.data.user_id.length > 1,\r\n                sortBy: action.data.sortPacks.slice(1),\r\n                sortPacksDirection: Number(action.data.sortPacks.substring(0, 1)),\r\n                searchText: action.data.packName,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardPacksAC = (data: PacksResponseType & NewCardsApiModelType) =>\r\n    ({type: 'packs/SET-CARD-PACKS', data} as const)\r\n\r\n\r\n//thunks\r\nexport const setCardPacksTC = (data?: PacksRequestDataType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newCardsApiModel = packsApiModel(getState().packs, data)\r\n\r\n        const pastPageCount = getState().packs.pageCount\r\n        const currentPage = getState().packs.page\r\n        const currentPageCount = newCardsApiModel.pageCount\r\n        const newPage = pastPageCount !== currentPageCount\r\n            ? Math.floor(pastPageCount * (currentPage - 1) / currentPageCount) + 1\r\n            : newCardsApiModel.page\r\n\r\n        try {\r\n            const res = await cardPacksApi.fetchPacks({...newCardsApiModel, page: newPage})\r\n            dispatch(setCardPacksAC({...res.data, ...newCardsApiModel, page: newPage}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const createPackTC = (data: CreatePackRequestType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await cardPacksApi.createPack(data)\r\n        dispatch(setCardPacksTC({packName: '', page: 1, sortPacks: '0updated'}))\r\n    } catch (err) {\r\n        dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (packId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.deletePack(packId)\r\n            const cardsState = getState().packs\r\n            const remainPacks = cardsState.cardPacksTotalCount - (cardsState.pageCount * (cardsState.page - 1))\r\n            dispatch(setCardPacksTC({\r\n                page: remainPacks === 1\r\n                    ? cardsState.page === 1 ? cardsState.page : cardsState.page - 1\r\n                    : cardsState.page\r\n            }))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packID: string, name?: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            await cardPacksApi.updatePack({_id: packID, name})\r\n            dispatch(setCardPacksTC({page: 1}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type PacksInitialStateType = PacksResponseType & {\r\n    myPacks: boolean\r\n    sortPacksDirection: number\r\n    sortBy: string\r\n    user_id: string\r\n    packName: string\r\n    searchText: string\r\n    min: number\r\n    max: number\r\n    cardPacksTotalCount: number\r\n}\r\ntype NewCardsApiModelType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\n\r\nexport type SetCardPacksActionType = ReturnType<typeof setCardPacksAC>\r\n\r\nexport type PacksActionsType =\r\n    | SetCardPacksActionType\r\n","import React, {ChangeEvent, FC, memo, useState} from 'react';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {PacksInitialStateType, setCardPacksTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport s from './NavBar.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const NavBar: FC = memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    const [sliderValue, setSliderValue] = useState<number[]>([packs.min, packs.max])\r\n\r\n    const onMyButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: id, min: 0, page: 1, pageCount: 5}))\r\n        setSliderValue([0, packs.max])\r\n    }\r\n\r\n    const onAllButtonClick = () => {\r\n        dispatch(setCardPacksTC({user_id: '', min: sliderValue[0], max: sliderValue[1], page: 1, pageCount: 5}))\r\n    }\r\n\r\n    const changeSliderValue = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number[])\r\n    }\r\n\r\n    const changeSliderValueForPayload = () => {\r\n        dispatch(setCardPacksTC({min: sliderValue[0], max: sliderValue[1], page: 1}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid className={classes.navbar}>\r\n            <span className={classes.navbarShowPacksCards}>Show packs cards</span>\r\n\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" className={classes.navbarMyAllButtons}>\r\n                <Button onClick={onMyButtonClick}\r\n                        variant={packs.myPacks ? 'contained' : 'outlined'}>My</Button>\r\n                <Button onClick={onAllButtonClick}\r\n                        variant={packs.myPacks ? 'outlined' : 'contained'}>All</Button>\r\n            </ButtonGroup>\r\n\r\n            <div className={s.slider}>\r\n                <Slider\r\n                    value={sliderValue}\r\n                    max={packs.maxCardsCount}\r\n                    onChange={changeSliderValue}\r\n                    onChangeCommitted={changeSliderValueForPayload}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                />\r\n            </div>\r\n        </Grid>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        navbar: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            maxWidth: '200px',\r\n            minWidth: '200px',\r\n            backgroundColor: 'lightblue',\r\n            borderRadius: '4px 0px 0px 4px',\r\n        },\r\n        navbarShowPacksCards: {\r\n            fontSize: '20px',\r\n            fontWeight: 'bold',\r\n            marginTop: '10px',\r\n            marginBottom: '10px',\r\n        },\r\n        navbarMyAllButtons: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport {ProgressModalComponent} from '../progressModalComponent/ProgressModalComponent';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const LearnCardsModalAnswer: FC<LearnCardsModalPropsType> = memo(props => {\r\n\r\n    const {question, answer, packName, openNextRandomCard, closeAllModal} = props\r\n    const classes = useStyles()\r\n\r\n    const [grade, setGrade] = useState<number>(0)\r\n\r\n    const arrayOfGrades: GradeType = [\r\n        {valueOfGrade: 1, title: 'Did not know'},\r\n        {valueOfGrade: 2, title: 'Forgot'},\r\n        {valueOfGrade: 3, title: 'A lot of thought'},\r\n        {valueOfGrade: 4, title: 'Confused'},\r\n        {valueOfGrade: 5, title: 'Knew the answer'},\r\n    ]\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n    const onChangeCallback = (checkedValue: number) => {\r\n        if (grade === checkedValue) {\r\n            setGrade(0)\r\n        } else if (grade !== checkedValue) {\r\n            setGrade(checkedValue)\r\n        }\r\n    }\r\n\r\n    const nextButtonClickHandler = () => {\r\n        openNextRandomCard(grade === 0 ? 3 : grade)\r\n        setGrade(0)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByAnswer}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Answer: </b>{trimmedString(answer, 90)}\r\n                </div>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>{'Rate yourself:'}</b>\r\n                </div>\r\n\r\n                <ProgressModalComponent/>\r\n                <FormGroup aria-label=\"position\"\r\n                           className={classes.optionsForRateYourself}>\r\n                    {\r\n                        arrayOfGrades.map(el =>\r\n                            <FormControlLabel key={el.valueOfGrade.toString()}\r\n                                              name=\"myRadio\"\r\n                                              label={el.title}\r\n                                              labelPlacement=\"end\"\r\n                                              control={<Radio name=\"myRadio\"\r\n                                                              color=\"primary\"\r\n                                                              checked={el.valueOfGrade === grade}\r\n                                                              onClick={() => onChangeCallback(el.valueOfGrade)}/>}\r\n                            />\r\n                        )\r\n                    }\r\n                </FormGroup>\r\n\r\n                <Button\r\n                    className={classes.nextQuestionButton}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    onClick={nextButtonClickHandler}\r\n                >\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    question: string\r\n    answer: string\r\n    packName: string\r\n    openNextRandomCard: (grade: number) => void\r\n    closeAllModal: () => void\r\n}\r\ntype option = {\r\n    valueOfGrade: number\r\n    title: string\r\n}\r\ntype GradeType = option[]\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        optionsForRateYourself: {\r\n            margin: '5px 30px',\r\n            display: 'inline-flex',\r\n        },\r\n        nextQuestionButton: {\r\n            margin: '30px auto 0',\r\n            width: '100px',\r\n        },\r\n    }),\r\n);","import {AppThunk} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {cardPacksApi, CardsRequestType, GradeRequestType, OnePackType} from '../dal/api';\r\n\r\n\r\nconst initialState = [] as OnePackType[]\r\n\r\nexport type CardsForLearnInitialStateType = typeof initialState\r\n\r\nexport const cardsForLearnReducer = (state = initialState, action: CardsForLearnActionsType): CardsForLearnInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'cardsForLearn/SET-CARDS-OF-PACK':\r\n            return [\r\n                ...action.data,\r\n            ]\r\n\r\n        case 'cardsForLearn/RESET-CARDS-OF-PACK':\r\n            return []\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setCardsOfPackAC = (data: OnePackType[]) =>\r\n    ({type: 'cardsForLearn/SET-CARDS-OF-PACK', data} as const)\r\n\r\nexport const resetCardsOfPackAC = () =>\r\n    ({type: 'cardsForLearn/RESET-CARDS-OF-PACK'} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchCardsOfPackTC = (data: CardsRequestType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const cardsOfPackApiModel = {\r\n            cardsPack_id: data.cardsPack_id,\r\n            pageCount: data.pageCount,\r\n        }\r\n        try {\r\n            const res = await cardPacksApi.fetchPack(cardsOfPackApiModel)\r\n            dispatch(setCardsOfPackAC(res.data.cards))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        } finally {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const updatedGradeTC = (data: GradeRequestType, pageCount: number): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await cardPacksApi.updatedGrade(data)\r\n            dispatch(fetchCardsOfPackTC({cardsPack_id: res.data.updatedGrade.cardsPack_id, pageCount}))\r\n        } catch (err) {\r\n            dispatch(setAppErrorAC(err.response ? err.response.data.error : err.message))\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetCardsOfPackActionType = ReturnType<typeof setCardsOfPackAC>\r\nexport type ResetCardsOfPackActionType = ReturnType<typeof resetCardsOfPackAC>\r\n\r\nexport type CardsForLearnActionsType =\r\n    | SetCardsOfPackActionType\r\n    | ResetCardsOfPackActionType\r\n","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const EditPackModal: FC<AddPackModalPropsType> = memo(({oldName, closeEditPackModal, updatePackName}) => {\r\n\r\n    const classes = useStyles()\r\n    const [newName, setNewName] = useState(oldName)\r\n\r\n    const inputChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setNewName(e.currentTarget.value), [])\r\n\r\n    const onButtonClickHandler = useCallback(() => {\r\n        updatePackName(newName)\r\n        closeEditPackModal()\r\n    }, [newName, updatePackName, closeEditPackModal])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLDivElement>) =>\r\n        (e.key === 'Enter') && onButtonClickHandler(), [onButtonClickHandler])\r\n\r\n    const onBackgroundClick = () => {\r\n        closeEditPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddDeletePack}>\r\n                <h2>Enter new name of pack</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"New name\"\r\n                    autoFocus\r\n                    value={newName}\r\n                    onChange={inputChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        onClick={onButtonClickHandler}>RENAME</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    oldName: string\r\n    closeEditPackModal: () => void\r\n    updatePackName: (name?: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        addEditPackInput: {\r\n            margin: '30px 0 50px 0',\r\n        },\r\n    }),\r\n);","import React, {FC, memo} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const LearnCardsModalQuestion: FC<LearnCardsModalPropsType> = memo(props => {\r\n\r\n    const {packName, question, onAnswerButtonClick, closeAllModal} = props\r\n    const classes = useStyles()\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAllModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n\r\n            <div className={s.windowByQuestion}>\r\n                <h2 className={s.nameOfPack}>\r\n                    <b>Learn </b>\"{trimmedString(packName, 40)}\"\r\n                </h2>\r\n\r\n                <div className={s.randomQuestionAndAnswer}>\r\n                    <b>Question: </b>{trimmedString(question, 70)}\r\n                </div>\r\n\r\n                <Button\r\n                    className={classes.showAnswerButton}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    onClick={onAnswerButtonClick}\r\n                >\r\n                    Show answer\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype LearnCardsModalPropsType = {\r\n    packName: string\r\n    question: string\r\n    onAnswerButtonClick: () => void\r\n    closeAllModal: () => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        showAnswerButton: {\r\n            margin: '30px auto 0',\r\n            width: '160px',\r\n        },\r\n    }),\r\n);","import React, {FC, memo} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {trimmedString} from '../../../../../utils/trimmedString-util';\r\n\r\n\r\nexport const DeletePackModal: FC<DeletePackModalPropsType> = memo(props => {\r\n\r\n    const {closeDeletePackModal, deletePack, packName} = props\r\n    const classes = useStyles()\r\n\r\n    const onButtonClickHandler = () => {\r\n        deletePack()\r\n        closeDeletePackModal()\r\n    }\r\n    const onBackgroundClick = () => {\r\n        closeDeletePackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddEditDeleteCard} style={{height: '230px'}}>\r\n                <h2>Delete Pack</h2>\r\n                <p className={s.warningTitle}>Do you really want to remove <b>{trimmedString(packName, 20)}</b>? All\r\n                    cards will be excluded\r\n                    from this course.</p>\r\n                <div className={s.cancelAndDeleteButtons}>\r\n                    <Button\r\n                        className={classes.deletePackModalButton}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        onClick={closeDeletePackModal}>Cancel</Button>\r\n                    <Button\r\n                        className={classes.deletePackModalButton}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        onClick={onButtonClickHandler}\r\n                    >Delete</Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n//types\r\ntype DeletePackModalPropsType = {\r\n    closeDeletePackModal: () => void\r\n    deletePack: () => void\r\n    packName: string\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        deletePackModalButton: {\r\n            width: '100px',\r\n            margin: '45px 70px 0',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, memo, MouseEvent, useCallback, useEffect, useState} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport {deletePackTC, PacksInitialStateType, setCardPacksTC, updatePackTC} from '../../../../bll/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../bll/store';\r\nimport Table from '@material-ui/core/Table';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {trimmedString} from '../../../../utils/trimmedString-util';\r\nimport {updateDate} from '../../../../utils/updateDate-util';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {TablePaginationActions} from '../../commonComponents/TablePagination';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport {LearnCardsModalAnswer} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalAnswer';\r\nimport {OnePackType} from '../../../../dal/api';\r\nimport {\r\n    CardsForLearnInitialStateType,\r\n    fetchCardsOfPackTC,\r\n    resetCardsOfPackAC,\r\n    updatedGradeTC\r\n} from '../../../../bll/learn-reducer';\r\nimport {EditPackModal} from '../../commonComponents/modal/editPackModal/EditPackModal';\r\nimport {LearnCardsModalQuestion} from '../../commonComponents/modal/learnCardsModal/LearnCardsModalQuestion';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport s from './PacksListTable.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {DeletePackModal} from '../../commonComponents/modal/deletePackModal/DeletePackModal';\r\n\r\n\r\nconst getCard = (cards: OnePackType[]) => {\r\n    const sumOfRepeats = cards.reduce((acc, card) => (acc + (6 - card.grade) ** 2), 0)\r\n    const random = Math.random() * sumOfRepeats\r\n    let sum = 0\r\n    let i = 0\r\n    do {\r\n        sum = sum + ((6 - cards[i].grade) ** 2)\r\n        i++\r\n    } while (sum < random)\r\n    return cards[i - 1]\r\n}\r\n\r\n\r\nexport const PacksListTable: FC<PacksListTableProps> = memo(props => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const cardsForLearn = useSelector<AppRootStateType, CardsForLearnInitialStateType>(state => state.cardsForLearn)\r\n\r\n    const [deletePackModal, setDeletePackModal] = useState(false)\r\n    const [deletePackData, setDeletePackData] = useState({id: '', name: ''})\r\n    const [editPackModal, setEditPackModal] = useState(false)\r\n    const [editPackData, setEditPackData] = useState({id: '', name: ''})\r\n    const [learnCardsModalQuestion, setLearnCardsModalQuestion] = useState(false)\r\n    const [learnCardsModalAnswer, setLearnCardsModalAnswer] = useState(false)\r\n\r\n    const [randomCard, setRandomCard] = useState({} as OnePackType)\r\n    const [name, setName] = useState('')\r\n    const [cardsCount, setCardsCount] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        if (cardsForLearn.length) {\r\n            setRandomCard(getCard(cardsForLearn))\r\n            setLearnCardsModalAnswer(false)\r\n            setLearnCardsModalQuestion(true)\r\n        }\r\n    }, [cardsForLearn])\r\n\r\n    const fetchAnswerQuestion = useCallback(() => {\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(true)\r\n    }, [])\r\n\r\n    const openNextRandomCard = useCallback((grade: number) => {\r\n        dispatch(updatedGradeTC({grade, card_id: randomCard._id}, cardsCount))\r\n    }, [dispatch, cardsCount, randomCard._id])\r\n\r\n    const closeAllModal = useCallback(() => {\r\n        dispatch(resetCardsOfPackAC())\r\n        setLearnCardsModalQuestion(false)\r\n        setLearnCardsModalAnswer(false)\r\n    }, [dispatch])\r\n\r\n    const closeEditPackModal = useCallback(() => {\r\n        setEditPackModal(false)\r\n    }, [])\r\n\r\n    const handleChangePage = useCallback((e: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        dispatch(setCardPacksTC({page: newPage + 1}))\r\n    }, [dispatch])\r\n\r\n    const updatePackName = useCallback((newName?: string) => {\r\n        dispatch(updatePackTC(editPackData.id, newName))\r\n    }, [dispatch, editPackData.id])\r\n\r\n    const closeDeletePackModal = useCallback(() => {\r\n        setDeletePackModal(false)\r\n    }, [])\r\n\r\n    const onDeleteButtonClickHandler = useCallback(() => {\r\n        dispatch(deletePackTC(deletePackData.id))\r\n    }, [dispatch, deletePackData])\r\n\r\n    const onClickSortHandler = (sortValue: SortByType) => {\r\n        if (packs.sortPacksDirection === 0) {\r\n            dispatch(setCardPacksTC({sortPacks: '1' + sortValue}))\r\n        } else {\r\n            dispatch(setCardPacksTC({sortPacks: '0' + sortValue}))\r\n        }\r\n    }\r\n\r\n    const handleChangePageCount = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(setCardPacksTC({pageCount: parseInt(e.target.value)}))\r\n    }\r\n\r\n    const startLearning = async (cardsPack_id: string, pageCount: number, name: string) => {\r\n        await dispatch(fetchCardsOfPackTC({cardsPack_id, pageCount}))\r\n        setName(name)\r\n        setCardsCount(pageCount)\r\n    }\r\n\r\n    const openEditPackModal = (id: string, name: string) => {\r\n        setEditPackData({id, name})\r\n        setEditPackModal(true)\r\n    }\r\n\r\n    const openDeletePackModal = (id: string, name: string) => {\r\n        setDeletePackData({id, name})\r\n        setDeletePackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                learnCardsModalQuestion &&\r\n                <LearnCardsModalQuestion\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    onAnswerButtonClick={fetchAnswerQuestion}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                learnCardsModalAnswer &&\r\n                <LearnCardsModalAnswer\r\n                    packName={name}\r\n                    question={randomCard.question}\r\n                    answer={randomCard.answer}\r\n                    openNextRandomCard={openNextRandomCard}\r\n                    closeAllModal={closeAllModal}\r\n                />\r\n            }\r\n            {\r\n                editPackModal &&\r\n                <EditPackModal\r\n                    oldName={editPackData.name}\r\n                    closeEditPackModal={closeEditPackModal}\r\n                    updatePackName={updatePackName}\r\n                />\r\n            }\r\n            {\r\n                deletePackModal &&\r\n                <DeletePackModal\r\n                    packName={deletePackData.name}\r\n                    closeDeletePackModal={closeDeletePackModal}\r\n                    deletePack={onDeleteButtonClickHandler}\r\n                />\r\n            }\r\n            <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                <TableHead className={classes.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'name'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('name')}\r\n                            >\r\n                                Name\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'cardsCount'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('cardsCount')}\r\n                            >\r\n                                Cards\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'updated'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('updated')}\r\n                            >\r\n                                Last Updated\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <TableSortLabel\r\n                                active={packs.sortBy === 'created'}\r\n                                direction={packs.sortPacksDirection === 1 ? 'desc' : 'asc'}\r\n                                onClick={() => onClickSortHandler('created')}\r\n                            >\r\n                                Created By\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        packs.cardPacks.map((cards) => (\r\n                                <TableRow key={cards._id}>\r\n                                    <TableCell component=\"th\" title={cards.name}>\r\n                                        <NavLink to={`/pack/${cards._id}`} className={classes.packsListTableBodyNavLink}>\r\n                                            {trimmedString(cards.name, 10)}\r\n                                        </NavLink>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{cards.cardsCount}</TableCell>\r\n                                    <TableCell align=\"left\">{updateDate(cards.updated)}</TableCell>\r\n                                    <TableCell align=\"left\" title={cards.user_name}>{trimmedString(cards.user_name, 10)}</TableCell>\r\n                                    <TableCell align=\"right\" style={{width: '224px'}}>\r\n                                                    <span className={classes.packsListTableBodyActionsSection}>\r\n                                                        {cards.user_id === id &&\r\n                                                        <span>\r\n                                                            <Button\r\n                                                                onClick={() => openDeletePackModal(cards._id, cards.name)}\r\n                                                                size=\"small\"\r\n                                                                variant=\"outlined\"\r\n                                                                color=\"secondary\">Delete</Button>\r\n                                                            <Button\r\n                                                                onClick={() => openEditPackModal(cards._id, cards.name)}\r\n                                                                size=\"small\"\r\n                                                                variant=\"outlined\"\r\n                                                                style={{margin: '0 10px'}}>Edit</Button>\r\n                                                        </span>\r\n                                                        }\r\n                                                        <Button\r\n                                                            onClick={() => startLearning(cards._id, cards.cardsCount, cards.name)}\r\n                                                            size=\"small\"\r\n                                                            variant=\"outlined\"\r\n                                                            disabled={cards.cardsCount === 0}\r\n                                                        >\r\n                                                            Learn\r\n                                                        </Button>\r\n                                                    </span>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        )\r\n                    }\r\n                </TableBody>\r\n                {\r\n                    packs.cardPacksTotalCount > 5 &&\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <td className={s.footerPage}>\r\n                                Page: {packs.page} (Total:{Math.ceil(packs.cardPacksTotalCount / packs.pageCount)})\r\n                            </td>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, {\r\n                                    label: 'All',\r\n                                    value: packs.cardPacksTotalCount\r\n                                }]}\r\n                                colSpan={6}\r\n                                count={packs.cardPacksTotalCount}\r\n                                rowsPerPage={packs.pageCount}\r\n                                page={packs.page - 1}\r\n                                SelectProps={{\r\n                                    inputProps: {'aria-label': 'rows per page'},\r\n                                    native: true,\r\n                                }}\r\n                                labelRowsPerPage={props.labelRowsPerPage}\r\n                                onPageChange={handleChangePage}\r\n                                onRowsPerPageChange={handleChangePageCount}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                }\r\n            </Table>\r\n        </>\r\n    )\r\n})\r\n\r\ntype SortByType = 'name' | 'cardsCount' | 'updated' | 'created'\r\ntype PacksListTableProps = {\r\n    labelRowsPerPage: string\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        table: {\r\n            minWidth: '700px',\r\n        },\r\n        tableHead: {\r\n            backgroundColor: 'lightblue',\r\n        },\r\n        packsListTableBodyNavLink: {\r\n            textDecoration: 'none',\r\n            color: 'black',\r\n            '&:hover': {\r\n                color: '#a5a5a5',\r\n            },\r\n        },\r\n        packsListTableBodyActionsSection: {\r\n            display: 'flex',\r\n            width: '224px',\r\n            justifyContent: 'flex-end',\r\n        },\r\n        footerPage: {\r\n            display: 'flex',\r\n            height: '53px',\r\n            marginLeft: '10px',\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport s from '../ModalWindow.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const AddPackModal: FC<AddPackModalPropsType> = memo(({closeAddPackModal, addNewPack}) => {\r\n\r\n    const classes = useStyles()\r\n    const [text, setText] = useState('')\r\n\r\n    const onButtonClickHandler = useCallback(() => {\r\n        addNewPack(text)\r\n        closeAddPackModal()\r\n    }, [text, addNewPack, closeAddPackModal])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLDivElement>) =>\r\n        (e.key === 'Enter') && onButtonClickHandler(), [onButtonClickHandler])\r\n\r\n    const inputChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setText(e.currentTarget.value), [])\r\n\r\n    const onBackgroundClick = () => {\r\n        closeAddPackModal()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.darkWindow}\r\n                 onClick={onBackgroundClick}>\r\n            </div>\r\n            <div className={s.windowByAddDeletePack}>\r\n                <h2>Enter new pack name</h2>\r\n                <TextField\r\n                    className={classes.addEditPackInput}\r\n                    variant=\"outlined\"\r\n                    margin=\"none\"\r\n                    label=\"Name\"\r\n                    autoFocus\r\n                    value={text}\r\n                    onChange={inputChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <Button color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={onButtonClickHandler}>Add new pack</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n//types\r\ntype AddPackModalPropsType = {\r\n    closeAddPackModal: () => void\r\n    addNewPack: (newPackName: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        addEditPackInput: {\r\n            margin: '30px 0 50px 0',\r\n        },\r\n    }),\r\n);","import React, {FC, memo, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../bll/store';\r\nimport {createPackTC, PacksInitialStateType, setCardPacksTC} from '../../../bll/packs-reducer';\r\nimport {saveState} from '../../../utils/localStorage-util';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {ProgressModalComponent} from '../commonComponents/modal/progressModalComponent/ProgressModalComponent';\r\nimport {NavBar} from './packs/NavBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport {Input} from '../commonComponents/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {PacksListTable} from './packs/PacksListTable';\r\nimport {ErrorSnackbar} from '../../../features/errors/ErrorSnackbar';\r\nimport {AddPackModal} from '../commonComponents/modal/addPackModal/AddPackModal';\r\nimport s from '../cards/Cards.module.css'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport const PacksList: FC = memo(() => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs)\r\n\r\n    const [addPackModal, setAddPackModal] = useState(false)\r\n    const [searchText, setSearchText] = useState<string>(packs.searchText)\r\n    const [intervalID, setIntervalID] = useState<NodeJS.Timeout>()\r\n\r\n    useEffect(() => {\r\n        dispatch(setCardPacksTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        saveState({\r\n            packs: {\r\n                cardPacks: [],\r\n                myPacks: packs.myPacks,\r\n                page: packs.page,\r\n                pageCount: packs.pageCount,\r\n                min: packs.min,\r\n                max: packs.max,\r\n                minCardsCount: packs.minCardsCount,\r\n                maxCardsCount: packs.maxCardsCount,\r\n                sortPacksDirection: packs.sortPacksDirection,\r\n                sortBy: packs.sortBy,\r\n                user_id: packs.user_id,\r\n                packName: packs.packName,\r\n                searchText: packs.searchText,\r\n                cardPacksTotalCount: packs.cardPacksTotalCount,\r\n            }\r\n        })\r\n    }, [packs])\r\n\r\n    const closeAddPackModal = useCallback(() => {\r\n        setAddPackModal(false)\r\n    }, [])\r\n\r\n    const addNewPack = useCallback((newPackName: string) => {\r\n        dispatch(createPackTC({cardsPack: {name: newPackName}}))\r\n    }, [dispatch])\r\n\r\n    const searchInputHandler = useCallback((value: string) => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID)\r\n        }\r\n        setSearchText(value)\r\n        const newIntervalID = setTimeout(() => {\r\n            dispatch(setCardPacksTC({packName: value, page: 1}))\r\n        }, 800)\r\n        setIntervalID(newIntervalID)\r\n    }, [dispatch, intervalID])\r\n\r\n    const openAddPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {addPackModal && <AddPackModal\r\n                closeAddPackModal={closeAddPackModal}\r\n                addNewPack={addNewPack}\r\n            />}\r\n            <Paper className={classes.paper}>\r\n                <ProgressModalComponent/>\r\n                <NavBar/>\r\n                <Container className={classes.body}>\r\n                    <div className={s.packListHeading}>Packs list</div>\r\n                    <div className={s.inputButtonSection}>\r\n                        <Input\r\n                            placeholderValue={'Search by questions'}\r\n                            value={searchText}\r\n                            dispatchHandler={searchInputHandler}\r\n                        />\r\n                        <Button\r\n                            className={classes.addNewPackButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={openAddPackModal}\r\n                        >\r\n                            Add new pack\r\n                        </Button>\r\n                    </div>\r\n                    <TableContainer className={classes.packsCardsFooter} component={Paper}>\r\n                        <PacksListTable labelRowsPerPage={'Packs per page'}/>\r\n                    </TableContainer>\r\n                </Container>\r\n            </Paper>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        container: {\r\n            padding: '0 12px',\r\n        },\r\n        paper: {\r\n            marginTop: '20px',\r\n            marginBottom: '60px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            minHeight: '600px',\r\n            minWidth: '1000px',\r\n        },\r\n        body: {\r\n            margin: '10px 12px',\r\n            padding: '0 12px',\r\n        },\r\n        addNewPackButton: {\r\n            width: '230px',\r\n            marginLeft: '20px',\r\n        },\r\n        packsCardsFooter: {\r\n            marginTop: '20px',\r\n        },\r\n    }),\r\n);\r\n","import React, {FC, memo, useEffect} from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Registration} from './components/auth/Registration';\r\nimport {Login} from './components/auth/Login';\r\nimport {ForgotPassword} from './components/auth/ForgotPassword';\r\nimport {Profile} from './components/profile/Profile';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './bll/store';\r\nimport {initializeAppTC} from './bll/app-reducer';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {NewPassword} from './components/auth/NewPassword';\r\nimport {PrivateRoute} from './features/privateRoute/PrivateRoute';\r\nimport {Error404} from './features/error404/Error404';\r\nimport {Header} from './components/header/Header';\r\nimport {Cards} from './components/main/cards/Cards';\r\nimport {PacksList} from './components/main/packsList/PacksList';\r\n\r\n\r\nconst App: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" isLoggedIn={isLoggedIn} render={() => <PacksList/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute exact path=\"/pack/:id\" isLoggedIn={isLoggedIn} render={() => <Cards/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/profile\" isLoggedIn={isLoggedIn} render={() => <Profile/>}\r\n                                  redirectTo=\"/login\"/>\r\n                    <PrivateRoute path=\"/login\" isLoggedIn={!isLoggedIn} render={() => <Login/>}\r\n                                  redirectTo=\"/\"/>\r\n                    <PrivateRoute path=\"/registration\" isLoggedIn={!isLoggedIn} render={() => <Registration/>}\r\n                                  redirectTo=\"/\"/>\r\n\r\n                    <Route exact path={'/changepassword'} render={() => <ForgotPassword/>}/>\r\n                    <Route path={'/changepassword/newpassword/:token?'} render={() => <NewPassword/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, AuthActionsType} from './auth-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {PacksActionsType, packsReducer} from './packs-reducer';\r\nimport {loadState} from '../utils/localStorage-util';\r\nimport {PackActionsType, cardsReducer} from './cards-reducer';\r\nimport {CardsForLearnActionsType, cardsForLearnReducer} from './learn-reducer';\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    cardsForLearn: cardsForLearnReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, loadState(), applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\nexport type AppRootActionsType =\r\n    | AuthActionsType\r\n    | AppActionsType\r\n    | PacksActionsType\r\n    | PackActionsType\r\n    | CardsForLearnActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backToPackAndTitle\":\"Cards_backToPackAndTitle__1jOPL\",\"titleBackToPacks\":\"Cards_titleBackToPacks__3juqj\",\"packListHeading\":\"Cards_packListHeading__7eDx3\",\"inputButtonSection\":\"Cards_inputButtonSection__1O_C1\",\"footerPage\":\"Cards_footerPage__35Zfr\",\"titleOfEmptyPack\":\"Cards_titleOfEmptyPack__2yCJh\"};"],"sourceRoot":""}